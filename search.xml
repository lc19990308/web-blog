<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>flex布局复习</title>
      <link href="2021/06/21/flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%A4%8D%E4%B9%A0/"/>
      <url>2021/06/21/flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="flex给项目排序"><a href="#flex给项目排序" class="headerlink" title="flex给项目排序"></a>flex给项目排序</h3><h5 id="例子如下"><a href="#例子如下" class="headerlink" title="例子如下"></a>例子如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;5&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box6&quot;&gt;6&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box7&quot;&gt;7&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.box div&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    order: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    order: 2;</span><br><span class="line">&#125;</span><br><span class="line">.box3&#123;</span><br><span class="line">    order: 3;</span><br><span class="line">&#125;</span><br><span class="line">.box4&#123;</span><br><span class="line">    order: 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flex布局下面的item，根据order的大小来进行排序，数值越小越靠前。</p><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p>分配flex下面的item成员的空间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;5&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box6&quot;&gt;6&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box7&quot;&gt;7&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.box div&#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    flex-grow: 2;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box3&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box4&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box5&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box6&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box7&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="flex-shrink属性。"><a href="#flex-shrink属性。" class="headerlink" title="flex-shrink属性。"></a>flex-shrink属性。</h4><p>当flex布局下面的item成员的宽度超过了，flex盒子的空间不足，flex-shrink，可以给他们全部等比缩小。默认为1，一个item成员flex-shrink为0，其他为1，那么前面的盒子不缩小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;5&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box6&quot;&gt;6&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box7&quot;&gt;7&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.box div&#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    width: 100px;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    flex-shrink: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box3&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box4&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box5&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box6&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box7&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="flex的-align-self属性"><a href="#flex的-align-self属性" class="headerlink" title="flex的 align-self属性"></a>flex的 align-self属性</h4><p>在flex父级盒子 对item下的成员使用，align-items center还是什么的时候，align-self，可以覆盖align-items的属性，只对items成员有效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;5&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box6&quot;&gt;6&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box7&quot;&gt;7&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    height: 300;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.box div&#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    flex-shrink: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box3&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box4&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    align-self: baseline;</span><br><span class="line">&#125;</span><br><span class="line">.box5&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box6&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box7&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    align-self: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用css做一个九宫格</title>
      <link href="2021/06/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E4%B9%9D%E5%AE%AB%E6%A0%BC/"/>
      <url>2021/06/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E4%B9%9D%E5%AE%AB%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h4 id="css中的，九宫格的实现。"><a href="#css中的，九宫格的实现。" class="headerlink" title="css中的，九宫格的实现。"></a>css中的，九宫格的实现。</h4><h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p>1，2个商品排列在一起，我很难处理其中的间距。因为如果左右各设10px,他俩之间有20px的间距。<br>2，那么我们如果只给一边间距的话，那么最左边以及最右边，总会多出来。还需要我们去清理。</p><p>解决方案如下。</p><p>1，flex布局。我们需要计算长度。非常非常准确的长度。css的calc()函数准确的满足了我的需要。比如，一个盒子是100%，我们一行三列。margin-right 是10px。实际上我们需要的只是，20px的marin值就够了。</p><p>那么就是 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width:calc((100%-20px)/3);</span><br></pre></td></tr></table></figure><p>2,通过width:calc((100%-20px)/3);，我们至少拿到了，确切的宽度。剩下的是要清除。盒子，marin-right第三个，要清除10px。再写一个类，去清除是一个非常麻烦，且死板的事情。</p><h5 id="nth-of-type选择器，"><a href="#nth-of-type选择器，" class="headerlink" title="nth-of-type选择器，"></a>nth-of-type选择器，</h5><p>1,文档：，:nth-of-type(n) 选择器匹配属于父元素的特定类型的第 N 个子元素的每个元素.<br>可以匹配父元素下面的每一子元素，并且带着规则。比如偶数，奇数，或者倍数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.box1&#123;</span><br><span class="line">    width: calc((100% - 20px) / 3);</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-of-type(3n)&#123;</span><br><span class="line">    margin-right: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>nth-of-type(3n)，清楚了第三个，第六个，第九个的盒子。边距。</p><h5 id="nth-last-child选择器"><a href="#nth-last-child选择器" class="headerlink" title=":nth-last-child选择器"></a>:nth-last-child选择器</h5><p>匹配父元素下面的子元素的，从最后开始算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.box1:nth-last-child(3)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-last-child(2)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-last-child(1)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">    width: 92%;</span><br><span class="line">    padding: 10px 4%;</span><br><span class="line">    height: 900px;</span><br><span class="line">    background-color: #f7f7f7;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    width: calc((100% - 20px) / 3);</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-of-type(3n)&#123;</span><br><span class="line">    margin-right: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-last-child(3)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-last-child(2)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-last-child(1)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 九宫格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中，class的使用</title>
      <link href="2021/06/11/Es6%E4%B8%ADclass%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/06/11/Es6%E4%B8%ADclass%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="ES6中的Class"><a href="#ES6中的Class" class="headerlink" title="ES6中的Class"></a>ES6中的Class</h3><h4 id="1-首先我们可以回归一下ES5之前的类是如何实现的。"><a href="#1-首先我们可以回归一下ES5之前的类是如何实现的。" class="headerlink" title="1.首先我们可以回归一下ES5之前的类是如何实现的。"></a>1.首先我们可以回归一下ES5之前的类是如何实现的。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//一个类</span><br><span class="line">function Tool(name)&#123;</span><br><span class="line">    this.name=&#x27;张三&#x27;;</span><br><span class="line">    this.run = function()&#123;</span><br><span class="line">        alert(`$&#123;this.name&#125;,在奔跑`);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line">//实例化</span><br><span class="line">var tool = new Tool(&#x27;李四&#x27;);</span><br><span class="line">tool.run();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用create创建类</span><br><span class="line">var Dog = &#123;</span><br><span class="line">    name:&#x27;大黄&#x27;,</span><br><span class="line">    run()&#123;</span><br><span class="line">        console.log(&#x27;我是大黄&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">Dog.prototype.name = &#x27;王五&#x27;;</span><br><span class="line">var dog = Object.create(Dog);</span><br><span class="line"></span><br><span class="line">//使用  Object.create 创建的类 没有 静态类型 ，prototype</span><br><span class="line">dog.run();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-ES6的class"><a href="#2-ES6的class" class="headerlink" title="2.ES6的class"></a>2.ES6的class</h4><p>1.es6的class更想是一个语法糖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//es6的类</span><br><span class="line">class Prson &#123;</span><br><span class="line">    constructor(name, age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    run()&#123;</span><br><span class="line">        console.log(&#x27;你好啊&#x27;+this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var prson = new Prson(&#x27;弟弟&#x27;);</span><br><span class="line">prson.run();//你好啊 弟弟</span><br><span class="line">console.log(prson)</span><br><span class="line">console.log(Prson === Prson.prototype.constructor);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Prson的原型链的构造器指向了Prson函数。所以 es6的构造函数也有prototype</span><br></pre></td></tr></table></figure><h4 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3.constructor"></a>3.constructor</h4><p>constructor是类的默认方法，只要new实例化的时候，就会调用。即使我们写，也会添加···</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.sayName();</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    sayName()&#123;</span><br><span class="line">        console.log(this.name);//小明</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const person = new Person(&#x27;小明&#x27;,11);</span><br><span class="line">//关于 constructor 类的默认方法。new实例化后会默认调用。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-class的特性"><a href="#4-class的特性" class="headerlink" title="4.class的特性"></a>4.class的特性</h4><p>1.class的方法除非你定义在实例化的对象上，否则都是定义在prototype上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.sayName();</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    sayName()&#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const person = new Person(&#x27;小明&#x27;,11);</span><br><span class="line">//类的方法只要不是定义在实例化后的对象上，就只能定义在prototype上面。</span><br><span class="line">person.love = ()=&gt;&#123;</span><br><span class="line">   console.log(11);</span><br><span class="line">&#125;</span><br><span class="line">person.love();</span><br><span class="line">console.log(Person.prototype.love)//undefined</span><br><span class="line">//关于 constructor 类的默认方法。new实例化后会默认调用。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.类只能先声明，后实例化。没有变量提升。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// error index.js:13 Uncaught ReferenceError: Cannot access &#x27;Person&#x27; before initialization</span><br><span class="line">const person = new Person(&#x27;小明&#x27;,11);</span><br><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.sayName();</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    sayName()&#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="class的静态方法。"><a href="#class的静态方法。" class="headerlink" title="class的静态方法。"></a>class的静态方法。</h4><p>1.静态方法只能在class上面调用。实例无法使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//class的静态方法 只能在类上调用，实例无法使用。</span><br><span class="line"></span><br><span class="line">class Dog&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;;</span><br><span class="line">    static run(name)&#123;</span><br><span class="line">        console.log(name)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">var dog = new Dog(&#x27;大黄&#x27;);</span><br><span class="line">Dog.run(&#x27;李四&#x27;);</span><br><span class="line">dog.run(&#x27;胖虎&#x27;);// dog.run is not a function</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.如果静态方法包含this，那么这个this指向class，而不是实例。（class的静态方法只能调用静态方法，不能调用实例方法。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line"></span><br><span class="line">//class的静态方法 只能在类上调用，实例无法使用。</span><br><span class="line"></span><br><span class="line">class Dog&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;;</span><br><span class="line">    static run(name)&#123;</span><br><span class="line">        this.pay();</span><br><span class="line">    &#125;;</span><br><span class="line">    pay()&#123;</span><br><span class="line">        console.log(&#x27;狗狗去付账&#x27;);</span><br><span class="line">    &#125;;</span><br><span class="line">    static pay()&#123;</span><br><span class="line">        console.log(&#x27;狗狗去福州&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Dog.pay();//index.js:16 狗狗去福州</span><br><span class="line">var dog = new Dog(&#x27;大黄&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从这里我们能得出 class的静态方法与实例方法可以重名。</p><h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><p>1.class里面加入 static 的属性就是静态属性，实例无法使用。只能给class使用。<br>2.和静态方法一样，静态属性与实例属性可以重名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//class的静态属性。</span><br><span class="line"></span><br><span class="line">class Dog &#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;;</span><br><span class="line">    static name = 11;</span><br><span class="line">&#125;;</span><br><span class="line">var dog = new Dog(&#x27;大黄&#x27;);</span><br><span class="line">console.log(Dog.name,dog.name)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关于class的extends，实现继承。"><a href="#关于class的extends，实现继承。" class="headerlink" title="关于class的extends，实现继承。"></a>关于class的extends，实现继承。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// class继承</span><br><span class="line"></span><br><span class="line">class Animal&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    run(name)&#123;</span><br><span class="line">        alert(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">//cat 继承了 Animalclass</span><br><span class="line">class Cat extends Animal&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">var cat = new Cat();</span><br><span class="line">cat.run(&#x27;李四&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="class-super关键字"><a href="#class-super关键字" class="headerlink" title="class super关键字"></a>class super关键字</h4><p>1.super可以作为函数，也可以作为对象。<br>2.子类继承父类之前，没有super函数，是不能使用this的。<br>3.super在子类的构造函数里面代表了父类的构造器。<br>4.super作为对象，调用父类的实例方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// class继承</span><br><span class="line"></span><br><span class="line">class Animal&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">     run()&#123;</span><br><span class="line">        console.log(&#x27;111&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">//cat 继承了 Animalclass</span><br><span class="line">class Cat extends Animal&#123;</span><br><span class="line">    constructor(name,age,color)&#123;</span><br><span class="line">        //super代表父类的构造函数。</span><br><span class="line">        super(name,age,color);</span><br><span class="line">        console.log(this.name,this.age)</span><br><span class="line">    &#125;</span><br><span class="line">    toString() &#123;</span><br><span class="line">        //super指向父类的实例方法。</span><br><span class="line">        super.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var cat = new Cat(&#x27;李四&#x27;,11,&#x27;red&#x27;);</span><br><span class="line">cat.toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.class是一个语法糖，本身还是基于prototype来做的继承。<br>2.静态类型static，只能在这个class访问。实例化的对象无法访问。<br>3.静态方法也只能给这个类去用。实例化后的对象无法使用。<br>4.子类继承父类，super必须要在构造器中作为函数使用。<br>5.super既可以当作函数也可以当作对象。作为函数，在子类构造器中代表了父类构造函数<br>作为对象代表了父类实例方法，在静态类型的方法中，指向父类。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的async与await</title>
      <link href="2021/06/05/JavaScript%E4%B8%AD%E7%9A%84async/"/>
      <url>2021/06/05/JavaScript%E4%B8%AD%E7%9A%84async/</url>
      
        <content type="html"><![CDATA[<h4 id="在JavaScript中，async与await的使用"><a href="#在JavaScript中，async与await的使用" class="headerlink" title="在JavaScript中，async与await的使用"></a>在JavaScript中，async与await的使用</h4><h5 id="1-async函数中的，async代表一个关键字。和await是一块用的。await只能在async函数里面使用。"><a href="#1-async函数中的，async代表一个关键字。和await是一块用的。await只能在async函数里面使用。" class="headerlink" title="1.async函数中的，async代表一个关键字。和await是一块用的。await只能在async函数里面使用。"></a>1.async函数中的，async代表一个关键字。和await是一块用的。await只能在async函数里面使用。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">定义一个异步函数。</span><br><span class="line">function one()&#123;  </span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        console.log(&#x27;11&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">定义一个async函数</span><br><span class="line">async function test()&#123;</span><br><span class="line">    await one();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(test());--Promise &#123;&lt;pending&gt;&#125;</span><br><span class="line">打印出来的async函数是一个promise对象</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">既然async函数内置了 promise对象，那么就可以使用then来调用。</span><br><span class="line">test().then(res=&gt;&#123;</span><br><span class="line">    console.log(&#x27;success&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-async函数是一个异步函数。我们亲眼看到async里面内置了promise对象，但是我想从执行顺序，时间上告诉你。它真的是异步。"><a href="#2-async函数是一个异步函数。我们亲眼看到async里面内置了promise对象，但是我想从执行顺序，时间上告诉你。它真的是异步。" class="headerlink" title="2.async函数是一个异步函数。我们亲眼看到async里面内置了promise对象，但是我想从执行顺序，时间上告诉你。它真的是异步。"></a>2.async函数是一个异步函数。我们亲眼看到async里面内置了promise对象，但是我想从执行顺序，时间上告诉你。它真的是异步。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function timer() &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">//定义一个异步函数。</span><br><span class="line">async function demo() &#123;</span><br><span class="line">    console.log(11);</span><br><span class="line">    await timer().then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;2000之后执行&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">demo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-那么为什么使用async而不是-直接去用promise呢？"><a href="#3-那么为什么使用async而不是-直接去用promise呢？" class="headerlink" title="3.那么为什么使用async而不是 直接去用promise呢？"></a>3.那么为什么使用async而不是 直接去用promise呢？</h5><p>原因很简单，因为，我们假设一个情况，promise A方法成功之后去调，Promise B方法，以此类推。是的promise其实已经很好了，但是。then多了 恐怕你不会觉得它优雅。<br>其次，我有八个异步方法，我需要等他们执行完毕后，一起告诉我结果。到底是成功和失败。async函数 更好一些。</p><p>请看例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//定义一个异步函数。</span><br><span class="line">async function demo() &#123;</span><br><span class="line">    await timer(1000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步A&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    await timer(2000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步B&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    await timer(5000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步C&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    return Promise.resolve();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//控制台打印结果</span><br><span class="line">/*</span><br><span class="line">异步A</span><br><span class="line">index.js:157 异步B</span><br><span class="line">index.js:160 异步C</span><br><span class="line">index.js:166 异步执行完毕</span><br><span class="line">*/</span><br><span class="line">demo().then(res=&gt;&#123;</span><br><span class="line">    console.log(&#x27;异步执行完毕&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于async函数的理解，就像一辆校车。必须要等所有的同学都上车了才能发车。await函数全部执行完毕了，才能拿到成功还是失败。</p><h5 id="async函数执行，我们必须要把promise的结果给-return出去，如果我们不return的话，与promise不同，async函数的promise对象的状态始终就是reslove。"><a href="#async函数执行，我们必须要把promise的结果给-return出去，如果我们不return的话，与promise不同，async函数的promise对象的状态始终就是reslove。" class="headerlink" title="async函数执行，我们必须要把promise的结果给 return出去，如果我们不return的话，与promise不同，async函数的promise对象的状态始终就是reslove。"></a>async函数执行，我们必须要把promise的结果给 return出去，如果我们不return的话，与promise不同，async函数的promise对象的状态始终就是reslove。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//定义一个异步函数。</span><br><span class="line">async function demo() &#123;</span><br><span class="line">    await timer(1000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步A&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    await timer(2000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步B&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    await timer(5000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步C&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    return Promise.resolve();//所以我们在这里把 promise的状态 return出去。</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//控制台打印结果</span><br><span class="line">/*</span><br><span class="line">异步A</span><br><span class="line">index.js:157 异步B</span><br><span class="line">index.js:160 异步C</span><br><span class="line">index.js:166 异步执行完毕</span><br><span class="line">*/</span><br><span class="line">demo().then(res=&gt;&#123;</span><br><span class="line">    console.log(&#x27;异步执行完毕&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="谈谈await的理解。"><a href="#谈谈await的理解。" class="headerlink" title="谈谈await的理解。"></a>谈谈await的理解。</h5><p>1.await必须要在async函数里面使用。否则报错。<br>2.await函数表示一个等待，它返回的不是promise对象，而是promise的结果。<br>3，await函数，会阻止async函数的执行。JavaScript是一个从上往下执行的语言。但是，await可以跳出async函数，继续往后面执行。</p><h5 id="关于await的执行顺序。"><a href="#关于await的执行顺序。" class="headerlink" title="关于await的执行顺序。"></a>关于await的执行顺序。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function timer(timer) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            return resolve(timer + 1000);</span><br><span class="line">        &#125;, timer);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">function one(num) &#123;</span><br><span class="line">    console.log(&#x27;第一次不延迟&#x27; + num);</span><br><span class="line">    return timer(num);</span><br><span class="line">&#125;;</span><br><span class="line">function two(num) &#123;</span><br><span class="line">    console.log(&#x27;第二次延迟&#x27; + num);</span><br><span class="line">    return timer(num);</span><br><span class="line">&#125;;</span><br><span class="line">function three(num) &#123;</span><br><span class="line">    console.log(&#x27;第三次延迟+&#x27; + num);</span><br><span class="line">    return timer(num);</span><br><span class="line">&#125;;</span><br><span class="line">async function test() &#123;</span><br><span class="line">    let time = 1000;</span><br><span class="line">    const timer1 = await one(time);</span><br><span class="line">    const timer2 = await two(timer1);</span><br><span class="line">    const timer3 = await three(timer2);</span><br><span class="line">    console.log(&#x27;第四次延迟&#x27;,timer3);</span><br><span class="line">    return Promise.resolve();</span><br><span class="line">&#125;;</span><br><span class="line">test().then(res=&gt;&#123;</span><br><span class="line">    console.log(&#x27;end&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">timer(1000).then(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;11&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">控制台打印</span><br><span class="line">1.第一次不延迟1000，因为test函数的变量值，传了进去，执行了one方法。  </span><br><span class="line">因为跳出async函数后，执行了timer也是异步方法。</span><br><span class="line">2.第二次延迟2000，所以继续执行two，还是遇到了await，跳出去。</span><br><span class="line">3.11，跳出来执行，timer异步任务结束。</span><br><span class="line">4.第三次延迟，3000，拿到了two函数的返回值。await跳出async函数，可惜async函数外部没有可执行的函数了。</span><br><span class="line">5.第四次，延迟，three函数的返回值出来了。</span><br><span class="line">6.11，await函数执行完毕，promise给结果。</span><br></pre></td></tr></table></figure><h5 id="async函数异常不好捕捉。try-catch-配合使用。"><a href="#async函数异常不好捕捉。try-catch-配合使用。" class="headerlink" title="async函数异常不好捕捉。try catch 配合使用。"></a>async函数异常不好捕捉。try catch 配合使用。</h5><p>反面案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//async函数异常不好捕捉，一个异常，后续方法都不会执行了。</span><br><span class="line">function run(value)&#123;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        if(value)&#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            reject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">async function test()&#123;</span><br><span class="line">    await run(true);</span><br><span class="line">    await run(false);</span><br><span class="line">&#125;;</span><br><span class="line">test().then(res=&gt;&#123;</span><br><span class="line">    console.log(&#x27;成功了&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//控制台Uncaught (in promise) undefined</span><br></pre></td></tr></table></figure><p>正确方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">使用try catch配合。</span><br><span class="line">function run(value) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        if (value) &#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            reject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">async function test() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        await run(false);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(&#x27;run(false)报错&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        await run(true);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(&#x27;run(true)报错&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">test().then(res =&gt; &#123;</span><br><span class="line">    console.log(&#x27;成功了&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//控制台run(false)报错，成功了</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>1.async是语法糖，也是一个关键字。<br>2.async函数，内置promise。<br>3.async函数默认，resolve。必须return才能改变。<br>4.async函数，必须等所有的await函数都有结果了，promise才会有结果。<br>5.async函数，只要有一个await异步任务异常就会停止。<br>6.async函数建议配合try，catch。抛出异常，继续执行下个异步任务。</p><p>1.await代表一个异步任务。<br>2.await必须要在async里面用。<br>3.await函数，里面同步的方法还是会执行的。遇到promise，跳出async，等待。<br>4.await返回的不是promise对象，只是promise的结果。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的想法</title>
      <link href="2021/06/05/hello-world/"/>
      <url>2021/06/05/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><h2 id="1-自我介绍"><a href="#1-自我介绍" class="headerlink" title="1 自我介绍"></a>1 自我介绍</h2><p>1.我是一个比较热爱技术，沉默寡言的我。学历不高，受教育程度有限，使我在选择这门活计的时候犹豫了很久，最后抱着试试看的心态做的。<br>2.怕什么真理无穷，进一寸有一寸的欢喜</p>]]></content>
      
      
      <categories>
          
          <category> 开发日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我表达 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
