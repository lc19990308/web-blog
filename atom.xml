<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bug制造者</title>
  
  
  <link href="http://yaru722.gitee.io/atom.xml" rel="self"/>
  
  <link href="http://yaru722.gitee.io/"/>
  <updated>2021-09-02T13:03:40.111Z</updated>
  <id>http://yaru722.gitee.io/</id>
  
  <author>
    <name>lc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git团队协作</title>
    <link href="http://yaru722.gitee.io/2021/09/02/git%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C/"/>
    <id>http://yaru722.gitee.io/2021/09/02/git%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C/</id>
    <published>2021-09-02T13:02:42.874Z</published>
    <updated>2021-09-02T13:03:40.111Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>客驾到的时候，我使用了breach，来进行分支管控。<br>dev分支用来开发。master用来合并。</p><p>如果我和A君一起开发的话，我俩一起在一个dev分支下进行开发。然后去master进行合并。<br>春鹏告诉我，我们可以一人一个分支去玩的。一起往master上面合并。我意识到我对breach 的使用略显不足，所以补充一下我的理解。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>客驾到项目中，我想的更多的是 ，想通过分支来做一个<strong>沙盒</strong>。进行<strong>隔绝</strong>。<br>去进行<strong>区分</strong>。</p><p>但是，分支给我带来的体验并不好，因为2个人使用一个分支，我与A君，我们两个人之间，没有沙盒。</p><p>如果这个时候 B君也参与了进来，我们三个人，使用一个dev分支。超级容易打架。</p><h4 id="多分支开发。"><a href="#多分支开发。" class="headerlink" title="多分支开发。"></a>多分支开发。</h4><p>标准团队协作模式下进行开发。</p><p>应该有这样的分支。</p><p><strong>master</strong>  <strong>hotfix</strong> <strong>develop</strong> <strong>feature</strong> <strong>release</strong></p><table><thead><tr><th>分支名</th><th>用途</th></tr></thead><tbody><tr><td>master</td><td>主分支，随时都得处于发布状态。</td></tr><tr><td>hotfix</td><td>修复线上的bug</td></tr><tr><td>develop</td><td>开发分支</td></tr><tr><td>feature</td><td>开发功能分支。</td></tr><tr><td>release</td><td>预发布分支。</td></tr></tbody></table><p>首先咱们先从 master分支下 创建 develop<br>develop 下创建 feature分支，用来开发功能。<br>功能开发结束，develop合并feature的功能。<br>然后从develop签出一条 release分支。用来准备发布。<br>出现bug，release修复bug，修复结束，同步给develop，与matser分支。</p><p>master分支 出现bug。</p><p>建立hotfix分支。修复bug。修复成功同步给master 与develop。</p><p>主要还是围绕着master 与 develop来展开的。</p><p>这就是标准的 git团队协作。</p>]]></content>
    
    
    <summary type="html">如何进行git团队协作，使用git遇到的坑儿</summary>
    
    
    
    <category term="git" scheme="http://yaru722.gitee.io/categories/git/"/>
    
    
    <category term="git" scheme="http://yaru722.gitee.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>2021年8月14日日报</title>
    <link href="http://yaru722.gitee.io/2021/08/14/2021%E5%B9%B48%E6%9C%8814%E6%97%A5%E6%97%A5%E6%8A%A5/"/>
    <id>http://yaru722.gitee.io/2021/08/14/2021%E5%B9%B48%E6%9C%8814%E6%97%A5%E6%97%A5%E6%8A%A5/</id>
    <published>2021-08-14T11:54:00.771Z</published>
    <updated>2021-08-14T11:55:49.565Z</updated>
    
    <content type="html"><![CDATA[<h5 id="已完成的事情"><a href="#已完成的事情" class="headerlink" title="已完成的事情"></a>已完成的事情</h5><ol><li>看webview与iframe</li><li>对着html进行查漏补缺</li><li>gitee，实名</li><li>看naive ui</li><li>uniapp，阅读了一下入门知识</li><li>html语义化规范</li></ol><h5 id="未完成的事情"><a href="#未完成的事情" class="headerlink" title="未完成的事情"></a>未完成的事情</h5><ul><li>递归算法</li><li>nuxt</li><li>uniapp router权限控制</li></ul><h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><ul><li><p>webview是什么。  </p><blockquote><ol><li>浏览器专门针对像java啊，ios 安卓这样原生语言来设计的</li><li>原生应用就像一个孤岛。需要使用webview来接入web服务端的内容。</li><li>webview更像一个浏览器的渲染引擎。</li><li>通过webview，JavaScript可以调用原生的api，原生也可以加载web端的信息。</li></ol></blockquote></li><li><p>iframe是什么。</p><blockquote><p>1.html标签<br>2.加载网页。<br>3.上古时期的前端开发者用它来轮询。<br>4.自带一个沙盒机制。与页面代码互不打扰。<br>5.网页广告情况泛滥。<br>6.因为不知道别人有没有拿你的页面iframe，你会不会拿别人的页面iframe 所以不安全。</p></blockquote></li><li><p>html 标签查漏补缺。</p><blockquote><p>1.里面有个details标签。<br>2.meter 标签很有意思。<br>3.做好语义化。</p></blockquote></li></ul><h5 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h5><ul><li>html语义化与html常用标签。</li><li>webview与iframe</li></ul><h5 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h5><ul><li>效率低下</li><li>今天没有使用番茄钟</li></ul>]]></content>
    
    
    <summary type="html">巩固印象</summary>
    
    
    
    <category term="开发日记" scheme="http://yaru722.gitee.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="开发日记" scheme="http://yaru722.gitee.io/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>html查漏补缺</title>
    <link href="http://yaru722.gitee.io/2021/08/14/%E9%87%8D%E6%96%B0%E5%A4%8D%E4%B9%A0html/"/>
    <id>http://yaru722.gitee.io/2021/08/14/%E9%87%8D%E6%96%B0%E5%A4%8D%E4%B9%A0html/</id>
    <published>2021-08-14T11:29:12.929Z</published>
    <updated>2021-08-14T11:30:19.614Z</updated>
    
    <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p>一个优秀的前端开发者，一定不是靠着一手所谓的<div><p>标签一把梭的。</p><p>即使html是一个超文本标记语言。JavaScript一直以来才是web开发者中的重中之重。</p><h5 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h5><ol><li><code>&lt;article&gt;&lt;/article&gt;</code>标签</li></ol><blockquote><p>w3cschool 是这样描述它的。article元素规定独立的自包含内容。  </p><article>元素的应用场景是 论坛，博客，新闻。</blockquote><p>独立的自包含内容，指的是，article标签，内部可以设置header，footer各种标签。来展示一篇独立的文章内容。</p><ol start="2"><li><code>&lt;aside&gt;&lt;/aside&gt;</code></li></ol><blockquote><p>aside标签2种用法。<br>要么文章标题的补充部分。<br>要么就是侧边栏。<br>与div差不多，但是html5 推行语义化标签的结果。</p></blockquote><ol start="3"><li><code>&lt;bdi&gt;&lt;bdi&gt;</code></li></ol><blockquote><p>我感觉 bdi标签没啥卵用。<br>标签允许您设置一段文本，使其脱离其父元素的文本方向设置。在发布用户评论或其他您无法完全控制的内容时</p></blockquote><blockquote><p>文档上是这么说。</p></blockquote><blockquote><p>但是在我眼里，这标签只会把 所谓的文字 如果是数字的话 改变一些排列的方向而已。</p></blockquote><ol start="4"><li><code>&lt;details&gt;&lt;/details&gt;与, &lt;summary&gt;&lt;summary/&gt;    </code></li></ol><blockquote><p>details是用于描述文档的细节。<br>summary details的标题。</p></blockquote><p>上代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;details draggable=&quot;true&quot;&gt;</span><br><span class="line">    &lt;summary&gt;详情菜单&lt;/summary&gt;</span><br><span class="line">    &lt;div&gt;详情内容&lt;/div&gt;</span><br><span class="line">&lt;/details&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><code>&lt;dialog&gt;&lt;/dialog&gt;</code></li></ol><blockquote><p>一个对话框，弹窗标签。open 打开关闭与否。<br>能和form配合使用。</p></blockquote><ol start="6"><li><code>&lt;figure&gt;&lt;/figure&gt;   &lt;figcaption&gt;&lt;/figcaption&gt;</code></li></ol><blockquote><p>用作文档中插图的图像，带有一个标题：figcaption。使用场景语焉不详</p></blockquote><ol start="7"><li><code>&lt;main&gt;&lt;/main&gt;</code></li></ol><blockquote><p>main标签对于文档来说 应该是唯一的。<br>文档最重要的内容。<br>不能嵌套hader footer等。应该保持平级。</p></blockquote><ol start="8"><li><code>&lt;mark&gt;&lt;/mark&gt;</code></li></ol><blockquote><p>定义重要或强调的内容。</p></blockquote><ol start="9"><li><code>&lt;meter&gt;&lt;/meter&gt;</code></li></ol><blockquote><p>它进度条<progress>的标签不一样的是，它更适合在磁盘用量，手机电量的展示上面。</p></blockquote><p>上代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meter value=&quot;0.2&quot; max=&quot;1&quot; min=&quot;0&quot; low=&quot;0.1&quot; high=&quot;0.2&quot; optimum=&quot;1&quot; &gt;&lt;/meter&gt;</span><br><span class="line">/**</span><br><span class="line">   * max 最大的值</span><br><span class="line">   * min 最小的值</span><br><span class="line">   * high 被规定高的范围</span><br><span class="line">   * low 被规定低的范围</span><br><span class="line">   * optimum 规定度量的优化值。</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="10"><li><code>&lt;nav&gt;&lt;/nav&gt;</code></li></ol><blockquote><nav> 标签定义导航链接的部分。</blockquote><ol start="11"><li><code>&lt;progress&gt;&lt;/progress&gt;</code></li></ol><blockquote><p>进度条 无需多言。</p></blockquote><ol start="12"><li><code>&lt;section&gt;&lt;/section&gt;</code></li></ol><blockquote><p>表示文档中的一个章节。</p></blockquote><ol start="13"><li><code>&lt;&lt;wbr&gt;</code></li></ol><blockquote><p>在合适的位置换行，如果文字一行排放不完的话。wbr换行，让文本没那么割裂。</p></blockquote><p>14.<code>base </code></p><blockquote><p>是要设置在 heade标签里面了。规定了所有的超链接，该如何跳转。<br>当前页还是新开一个页面。</p></blockquote><p>举个例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html lang=&quot;zh&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;刘超的demo&lt;/title&gt;</span><br><span class="line">    &lt;!--设置base target 来保证所有的超链接都该怎么样跳转--&gt;</span><br><span class="line">    &lt;base target=&quot;_blank&quot; /&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./css/index.css&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;http://www.w3school.com.cn&quot; &gt;W3School&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;http://www.w3school.com.cn&quot; &gt;W3School&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;http://www.w3school.com.cn&quot; &gt;W3School&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;http://www.w3school.com.cn&quot; &gt;W3School&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="15"><li><code>blockquote</code></li></ol><blockquote><p>标记长的引用。比如一个段落。</p></blockquote><ol start="16"><li><code>datalist</code></li></ol><blockquote><p>datalist，input的可能选项列表。来定义input可能出现的值。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=&quot;myCar&quot; list=&quot;cars&quot; /&gt;</span><br><span class="line">&lt;datalist id=&quot;cars&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;BMW&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;Ford&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;Volvo&quot;&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="17"><li><code> &lt;optgroup&gt; &lt;/optgroup&gt;</code></li></ol><blockquote><p>把select一些相关的选项组合在一起</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">  &lt;optgroup label=&quot;Swedish Cars&quot;&gt;</span><br><span class="line">    &lt;option value =&quot;volvo&quot;&gt;Volvo&lt;/option&gt;</span><br><span class="line">    &lt;option value =&quot;saab&quot;&gt;Saab&lt;/option&gt;</span><br><span class="line">  &lt;/optgroup&gt;</span><br><span class="line"></span><br><span class="line">  &lt;optgroup label=&quot;German Cars&quot;&gt;</span><br><span class="line">    &lt;option value =&quot;mercedes&quot;&gt;Mercedes&lt;/option&gt;</span><br><span class="line">    &lt;option value =&quot;audi&quot;&gt;Audi&lt;/option&gt;</span><br><span class="line">  &lt;/optgroup&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="18"><li><code>&lt;picture&gt;&lt;/picture&gt;</code></li></ol><blockquote><p>picture标签 不同的尺寸下展示不同的图片。</p></blockquote>]]></content>
    
    
    <summary type="html">复习html的一些知识点，查漏补缺。</summary>
    
    
    
    <category term="css" scheme="http://yaru722.gitee.io/categories/css/"/>
    
    
    <category term="九宫格" scheme="http://yaru722.gitee.io/tags/%E4%B9%9D%E5%AE%AB%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>2021年8月13日日报</title>
    <link href="http://yaru722.gitee.io/2021/08/13/2021%E5%B9%B48%E6%9C%8813%E6%97%A5%E6%97%A5%E6%8A%A5/"/>
    <id>http://yaru722.gitee.io/2021/08/13/2021%E5%B9%B48%E6%9C%8813%E6%97%A5%E6%97%A5%E6%8A%A5/</id>
    <published>2021-08-13T12:47:29.163Z</published>
    <updated>2021-08-13T12:53:51.068Z</updated>
    
    <content type="html"><![CDATA[<h5 id="已完成的事情"><a href="#已完成的事情" class="headerlink" title="已完成的事情"></a>已完成的事情</h5><ol><li>智喔喔调试bug。</li><li>部署nuxt打包。</li><li>指定番茄钟。</li><li>扫了一眼rust。</li><li>三元表达式里面使用匿名函数。</li></ol><h5 id="未完成的事情"><a href="#未完成的事情" class="headerlink" title="未完成的事情"></a>未完成的事情</h5><ol><li>智喔喔安卓调试</li><li>商城等待开工</li><li>uniapp文章待看</li></ol><h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p>1.nuxt打包问题。</p><p>nuxt的打包模式分为 build，和generate。<br>其中build里面打包，需要后端配置node，并且，但是需不需要做转发不得而知。</p><p>好像generate打包的是静态文件。但是却也可以使用。为了准确尽快出活。我没有细究。</p><p>2.跨域问题</p><p>我总感觉，nuxt就好像不需要跨域一样。待测试。</p><p>3.三元表达式-结合匿名函数一起使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var state = true;</span><br><span class="line">state ? (()=&gt;&#123;alert(11)&#125;)():(function b()&#123;alert(22)&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写完匿名函数之后，咱们需要多加个括号，表示是一个代码块。后面跟一个括号。</p><p>4.看春鹏的代码，了解了一些关于代码的规范。</p><p>比如，这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * description：刘超的代码</span><br><span class="line"> * author：刘超</span><br><span class="line"> * signa：只争朝夕</span><br><span class="line"> * timer：20点42分</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.nuxt更改布局页面。<br>nuxt在layouts，指定了多种布局方式，包括报错页面。与我们的视图。可以互相配合。互不干扰。</p><p>比如我不需要login加载导航栏。那就专门针对login。加载一个布局方式。</p><p>6.我们只需要在 vue文件下面layout:’指定的布局’</p><p>7.rust，具体印象，前端中后端语言，速度比c，c++快。</p><h5 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h5><ol><li>指定优秀的学习计划。</li><li>多看一些东西。</li><li>多像春鹏学习</li><li>nuxt的打包。</li></ol><h5 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h5><ol><li>少说话</li><li>三思而行</li></ol>]]></content>
    
    
    <summary type="html">开发日记，巩固印象</summary>
    
    
    
    <category term="开发日记" scheme="http://yaru722.gitee.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="开发日记" scheme="http://yaru722.gitee.io/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>臭德行的热血青年</title>
    <link href="http://yaru722.gitee.io/2021/07/10/%E8%87%AD%E5%BE%B7%E8%A1%8C%E7%9A%84%E7%83%AD%E8%A1%80%E9%9D%92%E5%B9%B4/"/>
    <id>http://yaru722.gitee.io/2021/07/10/%E8%87%AD%E5%BE%B7%E8%A1%8C%E7%9A%84%E7%83%AD%E8%A1%80%E9%9D%92%E5%B9%B4/</id>
    <published>2021-07-10T11:34:45.704Z</published>
    <updated>2021-07-10T11:41:35.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="臭德行的热血青年"><a href="#臭德行的热血青年" class="headerlink" title="臭德行的热血青年"></a>臭德行的热血青年</h2><p>一九七二年，我出生在吉林省和龙县龙门公社，那是我父母被下放的地方。据说他们是失手怀上了我，本来是想堕胎的，但是乡下的医疗卫生条件很差，出于安全的顾虑，他们才没有把我打掉。  </p><p>“你看你，多危险，龙门公社的医务所但凡靠谱一点儿，你就不能来到这世上了。”我稍稍大一点的时候，他们经常拿这样的话来逗我玩。在意识到生命苦乐参半之前，我无知地为此出过许多身冷汗，误以为能来到世间是一件格外值得庆幸的事情。</p><p>他们的玩笑有时候会使我对如果我没来会是什么样子的可能性遐想不已，钻牛角尖的时候，我会连续想上好几天。由于那时候我还不是一个无神论者，所以需要照顾到的可能性比现在多了很多倍。  </p><p>在我长大后看到很多反映类似“残酷青春”这样的主题的文艺作品之前，我还以为我的青少年时期过得还算顺利。我后来发现我经历过的很多真实事件，比如我小学的时候被几个人渣般的老师轮流摧残（一个老师派儿子来打我，另一个老师当着全班学生的面诬陷我是小偷），比如我在中学的时候很长的一段时间里定期被一群学校附近的大几岁的流氓无端羞辱和殴打，比如我离开校园之后跟一个女孩子热恋但她一直对我隐瞒着她的妓女身份等等，这些事情放到这些作品主人公的生命里，都会成为一个足以使他们杀人放火，或是彻底颓掉成为一个虚无主义者的充分条件，实际上，这些事情放在真实的生活里，对大多数人好像也是这样的结局。但是在我身上，这些好像只能让我扎扎实实地难过一段时间就过去了，甚至没有留下什么阴影。作为一个心理素质奇差、随便有点什么事情都会瞬间就紧张出一身冷汗的笨蛋，我又渐渐发现自己其实是一个内心强大、择善固执的好青年^_^  </p><p>坚定地选择做一个好人，让我在面对铺天盖地的流氓和道德感模糊的笨蛋的时候心理上充满自信和鄙视，但有些人给这种理直气壮的鄙视另外起了个名字叫道德优越感，不知道为什么，一件本来好像无比正当的事情因此又显得面目可疑了。  </p><p>和那个时代的很多傻男孩一样，我在很长的一段时间里一直都以为女人是对男人的长相全然不感冒的，所以二十来岁也没顾上让我的婴儿肥退下去，直到有一天自己的女朋友被一个帅哥勾走。二零零六年深夏，我看到深夏老师的文章“帅哥都是小甲鱼”，看得我老泪纵横，唏嘘不已，在王力宏的“爱你就等于爱自己”的背景音乐声中，一把鼻涕一把泪地做了深老师的铁杆粉丝。  </p><p>长得难看又打心眼里热爱妇女，为了亲近妇女，我想我应该是下意识地让自己练就了花言巧语的本事。由于这方面我天分好，态度又比较务实，所以基本上还很顺利。不过如果有得选，我还是宁可笨嘴笨舌，然后帅得气贯长虹。<br>有时候，你也会碰到在闪亮的人格和有思想的头脑面前兀自岿然不动的固执女孩。如果你同样固执地喜欢她，就不得不考虑快速减掉五十斤肥肉。  </p><p>回想起来好像无限漫长的青春期里，除了每个孩子都会感到迷茫的性问题之外，暴力问题也常常让我感到非常困惑。在我校某个同学被“敌校”的某些同学打伤后的报复行动的计划会上，我以我认为很正常的方式询问了受伤同学的受伤原因，结果换来的是一堆白眼和“这个节骨眼上，你还问这个有劲吗？”的表情。为了不被伙伴们孤立，我在心里不是很理解的情况下，以超出实际需要的积极性参与了群殴，换来了大家的谅解和尊重，然后我们得知我校同学挨打受伤的直接原因是他之前调戏了敌校打人同学的女朋友。  </p><p>让我继续困惑的是，那些不分青红皂白就打了人的同学中的大部分人这时候仍然纷纷表示“这不重要”。终于让我明白了他们只关注本帮还是外帮，本班还是外班、本校还是外校之后，他们给我造成的新的困惑是：他们看武侠小说的时候，竟然对小说中的人物的“武德”非常挑剔。（这帮精神分裂的家伙后来和我一样长大成人走进社会娶妻生子，在某些时期的晚上七点钟，他们会指着电视屏幕对老婆说，他们是我们的骨肉同胞，不过他们要是想分家我们就得杀过去干掉他们。然后看着孩子迷茫的脸爱怜地点点头说，对，会死人的，不过这是必须的，对分裂主义分子你决不能手软。）  </p><p>如果不幸生在一个这样的国家里的小地方，成长的时候基本上可以肯定没有人能在思想上给你很大的帮助，除非有奇迹。很多时候，不要说帮助，就连能互相理解和沟通的人也很难找。除了性和暴力，我在青春期的最主要的烦恼就是几乎找不到能畅快交流想法的人，总感觉身边的人好像不是笨蛋就是坏蛋。（好在我自己在很多方面也非常笨，所以也经常被他们嘲笑，于是大家心平气和）这样想来，那时候我把退学后的大部分时间用来读书或多或少也是一个必然的结果了。只是那时候我过于热爱文字了，以致于把琼瑶全集这样的都通读了一遍。我是我认识的男人里，唯一一个通读过琼瑶全集的奇男子。<br>我做了教师以后，有些和我一样生长在小地方的学生来信说，他们在身边找不到能沟通交流的朋友，感到很孤独。而且到处都是善意地摧残他们的长辈，整天打击他们拒绝同流合污的信念，搞得他们开始有点怀疑自己的坚持和这种坚持的价值了，问我如何保持饱满的情绪和旺盛的斗志。对于孤独的问题，我想限于条件，只能用读书的方式来解决，至于肯定自己的坚持和价值，我自己长大的时候自我调节的方式及过程大概是这样的：  </p><p>我不断听到那些在人品和能力上都让我由衷鄙视的长辈们对我说，你不要生气，中国的事儿就是这样，你生气也改变不了的，其实你到哪儿都一样，一定要学会适应环境，你不要太较真儿了，差不多就行了，你这样的态度到哪儿都吃不开……这种话听得多了，我就慢慢明白了，哦，原来我是一个正直的，对是非善恶感受强烈的，有理想，有追求，有原则的热血青年。  </p><p>过了些年，这些长辈们再次见到我的时候又惊讶地说，咦？你怎么和小的时候一模一样？一点都没变？奇怪，你还是这个臭德行怎么没被人搞死？嗯？听说你小子混得还挺好？我劝你还是小心点吧，你这么臭得瑟没什么好下场……这种话听得多了，我又渐渐明白了，哦，原来我是一个正直的，对是非善恶感受强烈的，有理想，有追求，有原则，有坚持的热血青年，并且还是个聪明的，有勇有谋的热血青年。</p>]]></content>
    
    
    <summary type="html">罗永浩的自传摘抄</summary>
    
    
    
    <category term="杂集" scheme="http://yaru722.gitee.io/categories/%E6%9D%82%E9%9B%86/"/>
    
    
    <category term="杂集" scheme="http://yaru722.gitee.io/tags/%E6%9D%82%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>vue路由组件传参</title>
    <link href="http://yaru722.gitee.io/2021/07/10/vue%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82/"/>
    <id>http://yaru722.gitee.io/2021/07/10/vue%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82/</id>
    <published>2021-07-10T11:22:35.643Z</published>
    <updated>2021-07-10T11:24:49.275Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于vue-router组件的传参"><a href="#关于vue-router组件的传参" class="headerlink" title="关于vue router组件的传参"></a>关于vue router组件的传参</h3><h5 id="提到，使用router进行传参，你会想到什么。从A页面，到B页面。只使用router，都有那些方式？"><a href="#提到，使用router进行传参，你会想到什么。从A页面，到B页面。只使用router，都有那些方式？" class="headerlink" title="提到，使用router进行传参，你会想到什么。从A页面，到B页面。只使用router，都有那些方式？"></a>提到，使用router进行传参，你会想到什么。从A页面，到B页面。只使用router，都有那些方式？</h5><ol><li> 比如vue 动态路由参数匹配？</li><li> 还是使用vue params，传参，比如通过router上的name，才能跳转，刷新一下参数就掉。</li><li> 还是比如query，参数拼接到字符串上？</li></ol><p>我们假设一个场景，我们在A页面到B页面，要传递一个object。是的，你一定要json一下，<br>在B页面接收都要做那些步骤。</p><ol><li>先写上一段，this.$route.query.object ….（我不说你也得觉得很长）</li><li>把拿到的参数josn化。</li><li>要把参数赋值到data，然后data再去使用。</li></ol><h5 id="发现的问题"><a href="#发现的问题" class="headerlink" title="发现的问题"></a>发现的问题</h5><h6 id="1-你是知道的，A页面想去B页面。那么如果C也想去B页面，并且不打算传参你该如何解决。"><a href="#1-你是知道的，A页面想去B页面。那么如果C也想去B页面，并且不打算传参你该如何解决。" class="headerlink" title="1. 你是知道的，A页面想去B页面。那么如果C也想去B页面，并且不打算传参你该如何解决。"></a>1. 你是知道的，A页面想去B页面。那么如果C也想去B页面，并且不打算传参你该如何解决。</h6><p>解决方案也简单，写个判断语句嘛。if，三元表达式，或者query，传递不同的标识符。这样页面C跳转B也没啥问题了。</p><h6 id="2-this-router-query-object-真的是一种很舒服的传参方式嘛，这么长。"><a href="#2-this-router-query-object-真的是一种很舒服的传参方式嘛，这么长。" class="headerlink" title="2. this.$router.query.object,真的是一种很舒服的传参方式嘛，这么长。"></a>2. this.$router.query.object,真的是一种很舒服的传参方式嘛，这么长。</h6><p>不是。</p><p>这就是我要讲vue router 组件传参的意义。</p><p>路由传参有三种模式</p><h6 id="布尔模式"><a href="#布尔模式" class="headerlink" title="布尔模式"></a>布尔模式</h6><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//router部分</span><br><span class="line">  &#123;</span><br><span class="line">    name:&#x27;user&#x27;,</span><br><span class="line">    path: &#x27;/user&#x27;,</span><br><span class="line">    component: () =&gt; import(&#x27;../views/user.vue&#x27;),</span><br><span class="line">    props: true //直接开启布尔模式</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  //跳转</span><br><span class="line">&lt;router-link :to=&quot;&#123;name: &#x27;user&#x27;,params: &#123;name: &#x27;word&#x27;,  age: &#x27;11&#x27;&#125;&#125;&quot;&gt;user&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">//页面取参数</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;name&#125;&#125;&#123;&#123;age&#125;&#125;&lt;/div&gt;&lt;!--参数是word11--&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&#x27;params&#x27;,&#x27;name&#x27;,&#x27;age&#x27;],</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>布尔模式下，props：true的情况下，params的参数会被设置为组件的props。</p><h6 id="对象模式"><a href="#对象模式" class="headerlink" title="对象模式"></a>对象模式</h6><p>例子如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//  router部分</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x27;user&#x27;,</span><br><span class="line">    path: &#x27;/user&#x27;,</span><br><span class="line">    component: () =&gt; import(&#x27;../views/user.vue&#x27;),</span><br><span class="line">    props: &#123;</span><br><span class="line">      name: &#x27;11&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">//跳转</span><br><span class="line">  &lt;router-link :to=&quot;&#123;name: &#x27;user&#x27;, params:&#123;name:&#x27;word&#x27;,age:&#x27;11&#x27;,&#125;&#125;&quot;&gt;user&lt;/router-link&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  页面</span><br><span class="line">  </span><br><span class="line">    &lt;template&gt;</span><br><span class="line">         &lt;div&gt;user&#123;&#123; name &#125;&#125;&#123;&#123; age &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [ &quot;name&quot;, &quot;age&quot;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对象模式只适合给静态类型的数据。。routerlink 传递进去的数据 拿不到。</p><p>函数模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//router</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x27;user&#x27;,</span><br><span class="line">    path: &#x27;/user&#x27;,</span><br><span class="line">    component: () =&gt; import(&#x27;../views/user.vue&#x27;),</span><br><span class="line">    props:route=&gt;(&#123;//函数模式，把route的参数给解构了。</span><br><span class="line">      name:route.query.name,</span><br><span class="line">      age:route.query.age,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  //跳转</span><br><span class="line">&lt;router-link :to=&quot;&#123;path:&#x27;/user&#x27;,query:&#123;name:&#x27;word&#x27;,age:&#x27;11&#x27;&#125;&#125;&quot;&gt;user&lt;/router-link&gt;</span><br><span class="line">  </span><br><span class="line">//user页面接收参数</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;user&#123;&#123; name &#125;&#125;&#123;&#123; age &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;!--参数是word11--&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;query&#x27;, &quot;name&quot;, &quot;age&quot;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><table><thead><tr><th>模式</th><th>特性</th><th>优点</th></tr></thead><tbody><tr><td>布尔值模式</td><td>props，属性为true，route.params，自动绑定为属性</td><td>不支持query</td></tr><tr><td>对象模式</td><td>适合静态类型</td><td>不支持动态类型</td></tr><tr><td>函数模式</td><td>支持params，query</td><td>没啥毛病</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">vue路由组件传参，布尔值模式，对象模式，函数模式。</summary>
    
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/categories/vue/"/>
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue的router</title>
    <link href="http://yaru722.gitee.io/2021/07/10/vue%E7%9A%84router/"/>
    <id>http://yaru722.gitee.io/2021/07/10/vue%E7%9A%84router/</id>
    <published>2021-07-10T11:17:07.774Z</published>
    <updated>2021-07-10T11:21:26.034Z</updated>
    
    <content type="html"><![CDATA[<h5 id="vue-动态路由"><a href="#vue-动态路由" class="headerlink" title="vue 动态路由"></a>vue 动态路由</h5><p>很多时候,向url上传参都是使用的，query传参，因为params很多时候，视图你需要靠name来找。</p><p>但是 动态路由，可以让我们在路由的url上面去定义一个参数。跳转的时候把参数传入过去就能匹配到该页面。</p><p>比如我们有个查询接口，id来查找非常好用。</p><p>代码例子如下。</p><p>我的router</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    name: &#x27;Home&#x27;,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/about/:id&#x27;,</span><br><span class="line">    name: &#x27;About&#x27;,</span><br><span class="line">    // route level code-splitting</span><br><span class="line">    // this generates a separate chunk (about.[hash].js) for this route</span><br><span class="line">    // which is lazy-loaded when the route is visited.</span><br><span class="line">    component: () =&gt; import(/* webpackChunkName: &quot;about&quot; */ &#x27;../views/About.vue&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跳转既可以使用 <routerlink>标签，也可以使用this.$router.push({path:”/url/params”})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/about/111&quot;&gt;动态路由&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>在路由的匹配页面上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.params.id,我们就能拿到。</span><br></pre></td></tr></table></figure><h5 id="关于匹配模式"><a href="#关于匹配模式" class="headerlink" title="关于匹配模式"></a>关于匹配模式</h5><p>常规的匹配模式，vue router 只匹配/分割开来的片段字符。如果想匹配任何路径，就需要使用通配符 </p><p>举个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path:&#x27;/user-*&#x27;</span><br></pre></td></tr></table></figure><p>那么 ，/user /user-love,/user-test，<br>*字通配符都能匹配得到。</p><p>不过我们一般会用 *号来匹配 ，查找不到的路径。<br>比如 404.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/404&#x27;,</span><br><span class="line">  name: &#x27;404&#x27;,</span><br><span class="line">  component: () =&gt; import(/* webpackChunkName: &quot;about&quot; */ &#x27;../views/404.vue&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  // 会匹配所有路径</span><br><span class="line">  path: &#x27;*&#x27;,</span><br><span class="line">  redirect:&#x27;/404&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只要匹配不到的路径 都会去 404</p><p>其他的匹配规则，暂时先不去看。我感觉有会用到他的一天，但是不是现在。</p><h5 id="vue-router-路由的嵌套"><a href="#vue-router-路由的嵌套" class="headerlink" title="vue router 路由的嵌套"></a>vue router 路由的嵌套</h5><p>//首先我们要给 /about 添加几个要嵌套的视图。</p><ol><li>children里面添加我们想要嵌套的视图。</li><li>子视图path 不带 “/”</li><li>父视图里面添加routerview</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/about&#x27;,</span><br><span class="line">  name: &#x27;About&#x27;,</span><br><span class="line">  component: () =&gt; import(/* webpackChunkName: &quot;about&quot; */ &#x27;../views/About.vue&#x27;),</span><br><span class="line">  children:[</span><br><span class="line">    &#123;</span><br><span class="line">      path:&#x27;user&#x27;,</span><br><span class="line">      component:()=&gt; import(&#x27;../views/user.vue&#x27;),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:&#x27;info&#x27;,</span><br><span class="line">      component:()=&gt; import(&#x27;../views/info.vue&#x27;),</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>视图嵌套出现的小问题。<br>我们需要 访问 /user/info 如果 不访问 /info 就只跳转到 /user页面的话。很尴尬。</p><p>所以我们要对 如果他直接访问我们user的情况下进行重定向。</p><p>访问 user的情况下 直接重定向到 /user/xxxxx页面。</p><p>例子如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/about&#x27;,</span><br><span class="line">  redirect:&#x27;/about/user&#x27;,//我们在这里重定向</span><br><span class="line">  name: &#x27;About&#x27;,</span><br><span class="line">  component: () =&gt; import(/* webpackChunkName: &quot;about&quot; */ &#x27;../views/About.vue&#x27;),</span><br><span class="line">  children:[</span><br><span class="line">    &#123;</span><br><span class="line">      path:&#x27;user&#x27;,</span><br><span class="line">      component:()=&gt; import(&#x27;../views/user.vue&#x27;),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:&#x27;info&#x27;,</span><br><span class="line">      component:()=&gt; import(&#x27;../views/info.vue&#x27;),</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命名路由的，可以直接 this.$router.push({name:’user’})</p><p>但是我不需要这样写。略….</p><h5 id="命名视图与嵌套视图。"><a href="#命名视图与嵌套视图。" class="headerlink" title="命名视图与嵌套视图。"></a>命名视图与嵌套视图。</h5><p>vue router 的命名视图，我大概是明白怎么使用了。但是不知道怎么样更好的去使用他。</p><p>例子如下。</p><p>1，命名视图的组件是使用components的。不是component。<br>2.设置默认的视图名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/&#x27;,</span><br><span class="line">  name: &#x27;Home&#x27;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    default:Home,</span><br><span class="line">    user:()=&gt; import(&#x27;../views/user&#x27;),</span><br><span class="line">    info:()=&gt; import(&#x27;../views/info&#x27;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在app.vue里面使用多个routerview</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view name=&quot;user&quot; /&gt;</span><br><span class="line">    &lt;router-view name=&quot;info&quot; /&gt;</span><br><span class="line">    &lt;router-view  /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="vue编程式导航"><a href="#vue编程式导航" class="headerlink" title="vue编程式导航"></a>vue编程式导航</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&#x27;...&#x27;&gt;&lt;/router-link&gt;</span><br><span class="line">等于我们调用的this.$router.push(),方式。</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>router</th><th>特性</th></tr></thead><tbody><tr><td>router.push()</td><td>往浏览器的history有记录</td></tr><tr><td>router.replace()</td><td>跳转美誉history记录</td></tr><tr><td>router.go()</td><td>向前向后跳转history记录</td></tr></tbody></table><h5 id="vue-router的重定向与别名"><a href="#vue-router的重定向与别名" class="headerlink" title="vue router的重定向与别名"></a>vue router的重定向与别名</h5><p>关于重定向。比如我们要访问一个/home的路径。可以通过redirect，来让我们跳到其他页面。</p><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//加载到首页，通过redirect 跳到了404页面。</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    name: &#x27;Home&#x27;,</span><br><span class="line">    redirect:&#x27;/404&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      default:Home,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们也可以一个方法动态返回要重定向的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方法接收目标参数 return返回参数。</span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/home&#x27;,</span><br><span class="line">    name: &#x27;Home&#x27;,</span><br><span class="line">    redirect:to=&gt;&#123;</span><br><span class="line">      return &#x27;/404&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      default:Home,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>router 别名的概念。</p><p>别名的是意思是，例子如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">我们访问 / 可以去跳转到首页。/home也能跳转到首页。虽然url是/home，但是匹配的规则还是/。</span><br><span class="line"></span><br><span class="line">就像小名与大名一样。</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    name: &#x27;Home&#x27;,</span><br><span class="line">    alias:&#x27;/home&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      default:Home,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>名字</th><th>特性</th></tr></thead><tbody><tr><td>redirect</td><td>访问/a,重定向访问/b，</td></tr><tr><td>alias</td><td>别名访问和匹配规则，与你正常访问的url匹配到一起。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">过了一遍vue router的文档。动态参数传参，视图嵌套，命名路由</summary>
    
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/categories/vue/"/>
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件基础</title>
    <link href="http://yaru722.gitee.io/2021/06/25/vue%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://yaru722.gitee.io/2021/06/25/vue%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/</id>
    <published>2021-06-25T12:50:50.570Z</published>
    <updated>2021-06-25T12:56:43.726Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vue的组件基础"><a href="#vue的组件基础" class="headerlink" title="vue的组件基础"></a>vue的组件基础</h4><p>创建一个组件</p><p>1，我们在src文件夹下面的components文件下，创建了一个组件。代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;cell&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            count:0,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>和平常写的vue组件没啥两样。</p><h5 id="关于组件的复用"><a href="#关于组件的复用" class="headerlink" title="关于组件的复用"></a>关于组件的复用</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;My-cell&gt;&lt;/My-cell&gt;</span><br><span class="line">  &lt;My-cell&gt;&lt;/My-cell&gt;</span><br><span class="line">  &lt;My-cell&gt;&lt;/My-cell&gt;</span><br><span class="line">  &lt;My-cell&gt;&lt;/My-cell&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每个组件都是独立的。里面的值不会出现窜。</p><p>组件的data必须必须必须是一个函数。<br>所以每个组件实例都会都可以维护一个返回实例的拷贝。</p><h5 id="关于组件中的prop。"><a href="#关于组件中的prop。" class="headerlink" title="关于组件中的prop。"></a>关于组件中的prop。</h5><p>1,prop是一个单向数据流，数据从组件外，自然而然的流向组件内。<br>2，组件内顶柜的prop来接收，组件外的指定参数。<br>3，prop可以校验数据的格式。</p><p>组件添加props</p><p>props我们可以指定数据类型与格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">    title:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        default:&#x27;我想静静&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    content:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        default:&#x27;假装我是一篇文章....&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    number:&#123;</span><br><span class="line">        type:Number,</span><br><span class="line">        default:0,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;My-cell :content=&quot;content&quot; :title=&quot;title&quot;&gt;&lt;/My-cell&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import cell from &quot;../components/cell/index.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      content:&#x27;你好阿，小老弟&#x27;,</span><br><span class="line">      title:&#x27;你好aaaa    &#x27;,</span><br><span class="line">      </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &quot;My-cell&quot;: cell,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="组件事件"><a href="#组件事件" class="headerlink" title="组件事件"></a>组件事件</h5><p>使用emit(),抛出事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;number&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;click()&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;cell&quot;,</span><br><span class="line">  props:&#123;</span><br><span class="line">      title:&#123;</span><br><span class="line">          type:String,</span><br><span class="line">          default:&#x27;我想静静&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">      content:&#123;</span><br><span class="line">          type:String,</span><br><span class="line">          default:&#x27;假装我是一篇文章....&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      number:&#123;</span><br><span class="line">          type:Number,</span><br><span class="line">          default:0,</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    click() &#123;</span><br><span class="line">        this.$emit(&#x27;getdata&#x27;,this.number);//0</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>getdata 拿到事件抛出的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;My-cell :content=&quot;content&quot; :title=&quot;title&quot; @getdata=&#x27;getdata&#x27;&gt;&lt;/My-cell&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import cell from &quot;../components/cell/index.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      content:&#x27;你好阿，小老弟&#x27;,</span><br><span class="line">      title:&#x27;你好aaaa    &#x27;,</span><br><span class="line">      </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &quot;My-cell&quot;: cell,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getdata(e)&#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="组件的插槽，可以命名。让组件更加灵活。"><a href="#组件的插槽，可以命名。让组件更加灵活。" class="headerlink" title="组件的插槽，可以命名。让组件更加灵活。"></a>组件的插槽，可以命名。让组件更加灵活。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;main&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用组件的 slot</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;My-cell&gt;</span><br><span class="line">      &lt;div slot=&quot;header&quot;&gt;11&lt;/div&gt;</span><br><span class="line">       &lt;div slot=&quot;main&quot;&gt;22&lt;/div&gt;</span><br><span class="line">        &lt;div slot=&quot;footer&quot;&gt;33&lt;/div&gt;</span><br><span class="line">    &lt;/My-cell&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import cell from &quot;../components/cell/index.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      content:&#x27;你好阿，小老弟&#x27;,</span><br><span class="line">      title:&#x27;你好aaaa    &#x27;,</span><br><span class="line">      </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &quot;My-cell&quot;: cell,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getdata(e)&#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><p>插槽可以命名，也可以绑定数据。但是必须要使用template 元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot; :user=&#x27;obj&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;main&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;cell&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">          obj:&#123;</span><br><span class="line">              name:&#x27;里斯哦&#x27;,</span><br><span class="line">              age:11,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以使用 scope.user.name,来访问数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;My-cell&gt;</span><br><span class="line">      &lt;template v-slot:header=&#x27;scope&#x27;&gt;&#123;&#123;scope.user.name&#125;&#125;&lt;/template&gt;</span><br><span class="line">       &lt;div slot=&quot;main&quot;&gt;22&lt;/div&gt;</span><br><span class="line">        &lt;div slot=&quot;footer&quot;&gt;33&lt;/div&gt;</span><br><span class="line">    &lt;/My-cell&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import cell from &quot;../components/cell/index.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      obj:&#123;</span><br><span class="line">        name:11,</span><br><span class="line">        age:&#x27;111&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &quot;My-cell&quot;: cell,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getdata(e)&#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="组件的动态切换插槽。"><a href="#组件的动态切换插槽。" class="headerlink" title="组件的动态切换插槽。"></a>组件的动态切换插槽。</h5><p>v-slot:[参数]</p><p>例子如下，组件我们2个插槽都会给上不同的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;zz&quot;&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot; :usr=&#x27;obj&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;main&quot; :username=&#x27;obj.name&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot; :age=&#x27;obj.age&#x27;&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;cell&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">          obj:&#123;</span><br><span class="line">              name:&#x27;里斯哦&#x27;,</span><br><span class="line">              age:11,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;My-cell&gt;</span><br><span class="line">      &lt;template v-slot:header=&quot;scope&quot;&gt;&#123;&#123; scope.usr.name &#125;&#125;&lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:[name]=&quot;scope&quot;&gt;&#123;&#123;scope&#125;&#125;&lt;/template&gt;</span><br><span class="line">    &lt;/My-cell&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import cell from &quot;../components/cell/index.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      obj: &#123;</span><br><span class="line">        name: 11,</span><br><span class="line">        age: &quot;111&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      name: &quot;footer&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &quot;My-cell&quot;: cell,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getdata(e) &#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>插槽可以缩写 用#来表示 v-slot:header=’scope’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;My-cell&gt;</span><br><span class="line">  &lt;template #header=&#x27;scope&#x27;&gt;&#123;&#123; scope.usr.name &#125;&#125;&lt;/template&gt;</span><br><span class="line">  &lt;template #[name]=&quot;scope&quot;&gt;&#123;&#123;scope&#125;&#125;&lt;/template&gt;</span><br><span class="line">&lt;/My-cell&gt;</span><br></pre></td></tr></table></figure><p>总结</p><table><thead><tr><th>组件属性</th><th>特性</th></tr></thead><tbody><tr><td>$emit()</td><td>子组件抛出去一个自定义事件，传一个参数。</td></tr><tr><td>props</td><td>单向数据流，父传子，监测数据类型，默认值。</td></tr><tr><td>slot</td><td>带一个插槽，可以指定名字，也可以成为作用域插槽，#表示缩写。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">谈谈vue的props，与emit，slot</summary>
    
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/categories/vue/"/>
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue数组对象赋值问题</title>
    <link href="http://yaru722.gitee.io/2021/06/25/vue%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E8%B5%8B%E5%80%BC%EF%BC%8C%E9%A1%B5%E9%9D%A2%E4%B8%8D%E5%88%B7%E6%96%B0/"/>
    <id>http://yaru722.gitee.io/2021/06/25/vue%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E8%B5%8B%E5%80%BC%EF%BC%8C%E9%A1%B5%E9%9D%A2%E4%B8%8D%E5%88%B7%E6%96%B0/</id>
    <published>2021-06-25T12:48:01.635Z</published>
    <updated>2021-06-25T12:56:58.129Z</updated>
    
    <content type="html"><![CDATA[<h5 id="数组的更新监测"><a href="#数组的更新监测" class="headerlink" title="数组的更新监测"></a>数组的更新监测</h5><p>vue是一个响应式的框架。data里面的数据的改动，会随时随地的传到view视图里面。</p><p>但是，对于data里面的object类型的数据，并不是这样的。</p><p>数组的更新监测，只有一下这些方法才能触发视图的更新。</p><table><thead><tr><th>触发视图更新的方法</th></tr></thead><tbody><tr><td>push()</td></tr><tr><td>pop()</td></tr><tr><td>shift()</td></tr><tr><td>unshift()</td></tr><tr><td>splice()</td></tr><tr><td>sort()</td></tr><tr><td>reverse()</td></tr></tbody></table><h5 id="遇到的问题。"><a href="#遇到的问题。" class="headerlink" title="遇到的问题。"></a>遇到的问题。</h5><p>1，我想对一个数组的1号位进行赋值。而且我不想使用数组方法。splie(),什么什么的。但是视图不会更新。</p><p>例子如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item,index) in arr&quot; :key=&#x27;index&#x27;&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br><span class="line">    //页面渲染出来的是 1 3 3 4</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;11&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      arr:[1,2,3,4],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    test() &#123;</span><br><span class="line">      this.arr[0] = 11;</span><br><span class="line">      console.log(this.arr);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    this.arr[1] = 3;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.arr[2] = 12;</span><br><span class="line">    // console.log(this.arr); [1,3,12,4]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为什么会这样，因为 data里面检测不到 对数组的改动。created的赋值，为什么被视图监测到了？</p><p>尤大大的文档： </p><blockquote><p>当你把一个普通的 JavaScript 对象传入 ==Vue 实例==作为 data 选项，Vue 将==遍历==此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 ==getter/setter==。Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</p></blockquote><blockquote><p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。这里需要注意的是不同浏览器在控制台打印数据对象时对 getter/setter 的格式化并不同，所以建议安装 vue-devtools 来获取对检查数据更加友好的用户界面</p></blockquote><p>通俗语言解释下</p><p>vue创建实例的时候，会把我们data里面的所有数据，全部转为getter 与 setter。</p><p>所以created 正是创建vue实例的时候。所以 isok。</p><p>但是 如果我们在 mounted生命周期函数里面操作的话，如果我们写个事件对data里面的数组赋值的话。</p><p>就必须要使用 this.$set方法。来进行。</p><h5 id="使用-this-set-方法。"><a href="#使用-this-set-方法。" class="headerlink" title="使用 $this.set()方法。"></a>使用 $this.set()方法。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item,index) in arr&quot; :key=&#x27;index&#x27;&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;11&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      arr:[1,2,3,4],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    test() &#123;</span><br><span class="line">      this.$set(this.arr,1,12);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    this.$set(this.arr,0,2);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // console.log(this.arr)</span><br><span class="line">    this.arr[1] = 3;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Vue.set( target, propertyName/index, value )</p>]]></content>
    
    
    <summary type="html">使用this.$set更新数据</summary>
    
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/categories/vue/"/>
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue中class与style绑定</title>
    <link href="http://yaru722.gitee.io/2021/06/23/vue%E4%B8%AD%E7%9A%84class%E4%B8%8Estyle%E7%BB%91%E5%AE%9A/"/>
    <id>http://yaru722.gitee.io/2021/06/23/vue%E4%B8%AD%E7%9A%84class%E4%B8%8Estyle%E7%BB%91%E5%AE%9A/</id>
    <published>2021-06-23T03:57:32.526Z</published>
    <updated>2021-06-23T03:58:20.097Z</updated>
    
    <content type="html"><![CDATA[<h5 id="class的绑定"><a href="#class的绑定" class="headerlink" title="class的绑定"></a>class的绑定</h5><p>1.通过v-bind：对象语法绑定class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; class=&quot;b-b-w-1&quot; :class=&quot;&#123;active:isactive,error:isactive&#125;&quot; value=&quot;&quot; /&gt;</span><br></pre></td></tr></table></figure><p>class中的 active 的绑定完全依赖于 isactive的布尔值。<br>class 绑定的静态类型与v-bind绑定动态类型，class最终还是会汇聚到一起。也就是这个样子。</p><p>class=’b-b-w-1 active error’;</p><p>绑定class的对象不一定非要在，模板里面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; class=&quot;b-b-w-1&quot; :class=&quot;objclass&quot; value=&quot;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">   data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">    objclass:&#123;</span><br><span class="line">active:true,</span><br><span class="line">error:true,</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>class=’b-b-w-1 active error’;</p><p>2.给class绑定一个数组，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; class=&quot;b-b-w-1&quot; :class=&quot;[&#x27;active&#x27;,&#x27;isactive&#x27;]&quot; value=&quot;&quot; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>甚至我们还能使用三元运算符 来绑定class。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; value=&quot;&quot; v-bind:class=&quot;[isActive ? activeClass : &#x27;&#x27;, &#x27;errorClass&#x27;]&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; value=&quot;&quot; :class=&quot;activeClass == isActive ? &#x27;&#x27;:&#x27;errorClass&#x27;&quot; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.给组件绑定class</p><p>class会将被添加到组件的根元素上。</p><p>简单写个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;myElement class=&#x27;test test1&#x27; &gt;&lt;/myElement&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果组件添加一个class，组件上本身就已经有一个class了。那么就不会覆盖。而是，共存。</p><p>例子如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;myElement class=&#x27;test test&#x27; &gt;&lt;/myElement&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.v-bind绑定 内联样式，强烈不推荐内联的写法。<br>但是必要的时候还是离不开，因为只有pc有hover效果，移动端需要active来模拟。</p><p>so，<br>看例子把。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; value=&quot;&quot; :style=&quot;&#123;color:&#x27;red&#x27;,backgroundColor:size&#125;&quot; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写样式最好使用 驼峰命名，第二个单词首字母大写。</p><p>内联样式绑定对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; value=&quot;&quot; :style=&quot;objStyle&quot; /&gt;</span><br><span class="line"></span><br><span class="line">objStyle:&#123;</span><br><span class="line">backgroundColor:&#x27;red&#x27;,</span><br><span class="line">color:&#x27;#ffffff&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内联样式 同样也可以绑定，数组语法。数组里面的对象是样式的集合。但是却没有class名。</p><p>优点就是我们省下来一个class名，确定就是权重贼高。</p><p>数组语法和对象语法，阅读起来更舒服。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   &lt;input type=&quot;text&quot; value=&quot;&quot; :style=&quot;[objStyle,objStyle1]&quot; /&gt;</span><br><span class="line"></span><br><span class="line">   objStyle: &#123;</span><br><span class="line">backgroundColor: &#x27;red&#x27;,</span><br><span class="line">color: &#x27;#ffffff&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">objStyle1: &#123;</span><br><span class="line">color: &#x27;#ffffff&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">关于vue v-bind，绑定class与style的用法</summary>
    
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/categories/vue/"/>
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue计算属性与侦听器</title>
    <link href="http://yaru722.gitee.io/2021/06/22/vue%E4%B8%AD%E7%9A%84%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E4%BE%A6%E5%90%AC%E5%99%A8/"/>
    <id>http://yaru722.gitee.io/2021/06/22/vue%E4%B8%AD%E7%9A%84%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E4%BE%A6%E5%90%AC%E5%99%A8/</id>
    <published>2021-06-22T13:41:40.242Z</published>
    <updated>2021-06-23T03:57:07.081Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vue的计算属性与侦听器"><a href="#vue的计算属性与侦听器" class="headerlink" title="vue的计算属性与侦听器"></a>vue的计算属性与侦听器</h4><p>computed的特性</p><ol><li>computed会观察data里面的所有数据的变化。</li><li>computed，观察改变的数据，你有使用才会执行。</li><li>computed数据会有缓存，计算的是默认值，你有你值改变了才会再次计算。</li></ol><h5 id="computed的-getter函数，与setter函数。"><a href="#computed的-getter函数，与setter函数。" class="headerlink" title="computed的 getter函数，与setter函数。"></a>computed的 getter函数，与setter函数。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">上代码</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;value  &quot; /&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;value1&quot; /&gt;</span><br><span class="line">&#123;&#123;example&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">value: 1,</span><br><span class="line">value1: 11,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">// 计算属性的 getter</span><br><span class="line">example: &#123;</span><br><span class="line">get(e) &#123;</span><br><span class="line">console.log(e)</span><br><span class="line">return e.value * 2;</span><br><span class="line">&#125;,</span><br><span class="line">set(value) &#123;</span><br><span class="line">this.value = value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">onLoad() &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">onShow() &#123;</span><br><span class="line">    //调用setter函数赋值。</span><br><span class="line">this.example = 122;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="computed与watch的区别。"><a href="#computed与watch的区别。" class="headerlink" title="computed与watch的区别。"></a>computed与watch的区别。</h5><p>computed更适合，针对一个数据的变化而进行变化。比如商品的价格等于，件数*价格-优惠券-折扣卡。这样的值，更适合computed来去做。<br>因为computed需要依赖其他数据。</p><p>watch的改变。更多程度上，更适用于，一个数据发生变化后做一些事情。</p>]]></content>
    
    
    <summary type="html">计算属性的getter，setter，watch与computed的区别</summary>
    
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/categories/vue/"/>
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue模板语法的查漏补缺</title>
    <link href="http://yaru722.gitee.io/2021/06/22/vue%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E7%9A%84%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://yaru722.gitee.io/2021/06/22/vue%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E7%9A%84%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</id>
    <published>2021-06-22T13:38:23.892Z</published>
    <updated>2021-06-22T13:40:20.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一直以来，都没有认真的看过vue的文档。所以把一些细节性的东西给过一遍。查漏补缺。"><a href="#一直以来，都没有认真的看过vue的文档。所以把一些细节性的东西给过一遍。查漏补缺。" class="headerlink" title="一直以来，都没有认真的看过vue的文档。所以把一些细节性的东西给过一遍。查漏补缺。"></a>一直以来，都没有认真的看过vue的文档。所以把一些细节性的东西给过一遍。查漏补缺。</h4><h5 id="1-关于vue的模板语法，表达式。我使用的很少很少。"><a href="#1-关于vue的模板语法，表达式。我使用的很少很少。" class="headerlink" title="1.关于vue的模板语法，表达式。我使用的很少很少。"></a>1.关于vue的模板语法，表达式。我使用的很少很少。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">status是0</span><br><span class="line">&lt;view class=&quot;&quot;&gt;</span><br><span class="line">    &#123;&#123;status ? &#x27;是&#x27;:&#x27;否&#x27;&#125;&#125;//否</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;&quot;&gt;</span><br><span class="line">    &#123;&#123;status ? &#x27;已激活&#x27;:&#x27;已冻结&#x27;&#125;&#125;//已冻结</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">在模板里面使用 三元表达式，我们可以省下一个过滤器。</span><br></pre></td></tr></table></figure><h5 id="1-1-关于使用，我们都知道-vue的v-bind可以绑定参数。如果他是一个动态参数呢？"><a href="#1-1-关于使用，我们都知道-vue的v-bind可以绑定参数。如果他是一个动态参数呢？" class="headerlink" title="1.1 关于使用，我们都知道 vue的v-bind可以绑定参数。如果他是一个动态参数呢？"></a>1.1 关于使用，我们都知道 vue的v-bind可以绑定参数。如果他是一个动态参数呢？</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a :[type]=&quot;url&quot;&gt;百度&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">url:&#x27;https://www.baidu.com/&#x27;,</span><br><span class="line">type:&#x27;href&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-2-v-on的修饰符。"><a href="#1-2-v-on的修饰符。" class="headerlink" title="1.2 v-on的修饰符。"></a>1.2 v-on的修饰符。</h5><p>v-on是用来 给vue的元素，绑定事件的。</p><p>例子如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们绑定了一个touch的事件。</span><br><span class="line">&lt;button type=&quot;default&quot; v-on:tap=&quot;touch()&quot;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>但是，如果碰到了问题呢，比如我一个元素上面绑定了2个事件，大家都知道事件冒泡，和事件捕获。这个时候，v-on绑定事件的时候的的修饰符，就非常有必要了。</p><p>v-on的修饰符，用.来表示。</p><p>再看一个例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;view type=&quot;default&quot; v-on:tap=&quot;touch()&quot;&gt;</span><br><span class="line">&lt;text @tap=&quot;test()&quot;&gt;你好&lt;/text&gt;</span><br><span class="line">&lt;text&gt;世界&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">touch()&#123;</span><br><span class="line">console.log(&#x27;11&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">test()&#123;</span><br><span class="line">console.log(&#x27;22&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">//触发test（）,打印结果，11，22</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先有2点，v-on：绑定事件的时候 可以简写为@。其次我们遇到了事件冒泡问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;view type=&quot;default&quot; v-on:tap=&quot;touch()&quot;&gt;</span><br><span class="line">&lt;text @tap.stop=&quot;test()&quot;&gt;你好&lt;/text&gt;</span><br><span class="line">&lt;text&gt;世界&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">touch()&#123;</span><br><span class="line">console.log(&#x27;11&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">test()&#123;</span><br><span class="line">console.log(&#x27;22&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">//v-on.stop修饰符 替我们阻止了事件的冒泡。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>v-on的修饰符还有很多。</p><table><thead><tr><th>v-on的修饰符</th><th>作用</th></tr></thead><tbody><tr><td>stop</td><td>阻止事件冒泡</td></tr><tr><td>once</td><td>事件只执行一次</td></tr><tr><td>prevent</td><td>阻止默认事件</td></tr><tr><td>capture</td><td>事件捕获</td></tr><tr><td>:keyup.enter</td><td>键盘事件，enter是回车</td></tr></tbody></table><hr><h4 id="总结知识点"><a href="#总结知识点" class="headerlink" title="总结知识点"></a>总结知识点</h4><ul><li>模板的三元表达式</li><li>指令的动态参数。[type]=’text’;</li><li>v-on绑定事件的修饰符。</li></ul><hr>]]></content>
    
    
    <summary type="html">模板使用三元表达式，v-on绑定事件下面的修饰符，以及[key]动态参数。</summary>
    
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/categories/vue/"/>
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件的双向绑定</title>
    <link href="http://yaru722.gitee.io/2021/06/22/vue%E7%9A%84%E7%BB%84%E4%BB%B6%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>http://yaru722.gitee.io/2021/06/22/vue%E7%9A%84%E7%BB%84%E4%BB%B6%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</id>
    <published>2021-06-22T13:32:19.769Z</published>
    <updated>2021-06-22T13:35:57.021Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vue组件的双向绑定。"><a href="#vue组件的双向绑定。" class="headerlink" title="vue组件的双向绑定。"></a>vue组件的双向绑定。</h4><p>一直以来vue自定义组件，都有个问题困惑我。prop，好像是一个单向数据流，父组件的数据可以传向子组件，可是子组件。无法修改父组件的值。</p><p>输入框的v-model也只是一个语法糖，实际上。还是把要传进来的值接受到之后再去通过$emit<br>自定义事件和值给抛了出去。</p><p>例子如下，我使用的是 uniapp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; :value=&quot;value&quot; @input=&#x27;updata&#x27; /&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;inputfield&quot;,</span><br><span class="line">props: &#123;</span><br><span class="line">value: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    //输入框输入触发，input事件的时候，我们使用emit()，把值给抛出去。value得到了更新。</span><br><span class="line">updata(e)&#123;</span><br><span class="line">this.$emit(&#x27;input&#x27;,e.detail.value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="sync是vue的修饰符，可以帮助props，实现双向绑定。"><a href="#sync是vue的修饰符，可以帮助props，实现双向绑定。" class="headerlink" title=".sync是vue的修饰符，可以帮助props，实现双向绑定。"></a>.sync是vue的修饰符，可以帮助props，实现双向绑定。</h5><p>例子如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">//sync绑定了value，</span><br><span class="line">&lt;inputfield :value.sync=&quot;value&quot; /&gt;</span><br><span class="line">&#123;&#123;value&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们看看组件内部是如何实现的</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;view class=&quot;&quot;&gt;</span><br><span class="line">&#123;&#123;value&#125;&#125;</span><br><span class="line">&lt;button type=&quot;default&quot; @tap=&#x27;run&#x27;&gt;run&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;inputfield&quot;,</span><br><span class="line">props: &#123;</span><br><span class="line">value: &#123;</span><br><span class="line">type: Boolean,</span><br><span class="line">default: false,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">run() &#123;</span><br><span class="line">//使用 emit触发一个update事件，然后:value，是我们子组件要改变的属性。</span><br><span class="line">if (this.value) &#123;</span><br><span class="line">this.$emit(&#x27;update:value&#x27;, false);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.$emit(&#x27;update:value&#x27;, true);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">input组件的v-model实现，emit。v-on：input，sync修饰符的使用。</summary>
    
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/categories/vue/"/>
    
    
    <category term="vue" scheme="http://yaru722.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>flex布局复习</title>
    <link href="http://yaru722.gitee.io/2021/06/21/flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yaru722.gitee.io/2021/06/21/flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-06-21T07:37:43.508Z</published>
    <updated>2021-06-21T07:39:22.235Z</updated>
    
    <content type="html"><![CDATA[<h3 id="flex给项目排序"><a href="#flex给项目排序" class="headerlink" title="flex给项目排序"></a>flex给项目排序</h3><h5 id="例子如下"><a href="#例子如下" class="headerlink" title="例子如下"></a>例子如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;5&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box6&quot;&gt;6&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box7&quot;&gt;7&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.box div&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    order: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    order: 2;</span><br><span class="line">&#125;</span><br><span class="line">.box3&#123;</span><br><span class="line">    order: 3;</span><br><span class="line">&#125;</span><br><span class="line">.box4&#123;</span><br><span class="line">    order: 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flex布局下面的item，根据order的大小来进行排序，数值越小越靠前。</p><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p>分配flex下面的item成员的空间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;5&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box6&quot;&gt;6&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box7&quot;&gt;7&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.box div&#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    flex-grow: 2;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box3&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box4&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box5&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box6&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box7&#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="flex-shrink属性。"><a href="#flex-shrink属性。" class="headerlink" title="flex-shrink属性。"></a>flex-shrink属性。</h4><p>当flex布局下面的item成员的宽度超过了，flex盒子的空间不足，flex-shrink，可以给他们全部等比缩小。默认为1，一个item成员flex-shrink为0，其他为1，那么前面的盒子不缩小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;5&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box6&quot;&gt;6&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box7&quot;&gt;7&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.box div&#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    width: 100px;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    flex-shrink: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box3&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box4&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box5&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box6&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box7&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="flex的-align-self属性"><a href="#flex的-align-self属性" class="headerlink" title="flex的 align-self属性"></a>flex的 align-self属性</h4><p>在flex父级盒子 对item下的成员使用，align-items center还是什么的时候，align-self，可以覆盖align-items的属性，只对items成员有效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;5&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box6&quot;&gt;6&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box7&quot;&gt;7&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    height: 300;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.box div&#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    flex-shrink: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box3&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box4&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    align-self: baseline;</span><br><span class="line">&#125;</span><br><span class="line">.box5&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box6&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">&#125;</span><br><span class="line">.box7&#123;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    align-self: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">flex，order排序，flex-grow，分配空间，flex-shrink缩放，align-self。</summary>
    
    
    
    <category term="css" scheme="http://yaru722.gitee.io/categories/css/"/>
    
    
    <category term="flex" scheme="http://yaru722.gitee.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>使用css做一个九宫格</title>
    <link href="http://yaru722.gitee.io/2021/06/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E4%B9%9D%E5%AE%AB%E6%A0%BC/"/>
    <id>http://yaru722.gitee.io/2021/06/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E4%B9%9D%E5%AE%AB%E6%A0%BC/</id>
    <published>2021-06-21T07:34:54.774Z</published>
    <updated>2021-06-21T07:37:04.067Z</updated>
    
    <content type="html"><![CDATA[<h4 id="css中的，九宫格的实现。"><a href="#css中的，九宫格的实现。" class="headerlink" title="css中的，九宫格的实现。"></a>css中的，九宫格的实现。</h4><h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p>1，2个商品排列在一起，我很难处理其中的间距。因为如果左右各设10px,他俩之间有20px的间距。<br>2，那么我们如果只给一边间距的话，那么最左边以及最右边，总会多出来。还需要我们去清理。</p><p>解决方案如下。</p><p>1，flex布局。我们需要计算长度。非常非常准确的长度。css的calc()函数准确的满足了我的需要。比如，一个盒子是100%，我们一行三列。margin-right 是10px。实际上我们需要的只是，20px的marin值就够了。</p><p>那么就是 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width:calc((100%-20px)/3);</span><br></pre></td></tr></table></figure><p>2,通过width:calc((100%-20px)/3);，我们至少拿到了，确切的宽度。剩下的是要清除。盒子，marin-right第三个，要清除10px。再写一个类，去清除是一个非常麻烦，且死板的事情。</p><h5 id="nth-of-type选择器，"><a href="#nth-of-type选择器，" class="headerlink" title="nth-of-type选择器，"></a>nth-of-type选择器，</h5><p>1,文档：，:nth-of-type(n) 选择器匹配属于父元素的特定类型的第 N 个子元素的每个元素.<br>可以匹配父元素下面的每一子元素，并且带着规则。比如偶数，奇数，或者倍数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.box1&#123;</span><br><span class="line">    width: calc((100% - 20px) / 3);</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-of-type(3n)&#123;</span><br><span class="line">    margin-right: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>nth-of-type(3n)，清楚了第三个，第六个，第九个的盒子。边距。</p><h5 id="nth-last-child选择器"><a href="#nth-last-child选择器" class="headerlink" title=":nth-last-child选择器"></a>:nth-last-child选择器</h5><p>匹配父元素下面的子元素的，从最后开始算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.box1:nth-last-child(3)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-last-child(2)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-last-child(1)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">    width: 92%;</span><br><span class="line">    padding: 10px 4%;</span><br><span class="line">    height: 900px;</span><br><span class="line">    background-color: #f7f7f7;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    width: calc((100% - 20px) / 3);</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-of-type(3n)&#123;</span><br><span class="line">    margin-right: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-last-child(3)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-last-child(2)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">.box1:nth-last-child(1)</span><br><span class="line">&#123;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">css中的calc函数，与nth-of-type选择器</summary>
    
    
    
    <category term="css" scheme="http://yaru722.gitee.io/categories/css/"/>
    
    
    <category term="九宫格" scheme="http://yaru722.gitee.io/tags/%E4%B9%9D%E5%AE%AB%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>ES6中，class的使用</title>
    <link href="http://yaru722.gitee.io/2021/06/11/Es6%E4%B8%ADclass%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yaru722.gitee.io/2021/06/11/Es6%E4%B8%ADclass%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-11T10:56:31.540Z</published>
    <updated>2021-06-21T07:32:45.242Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ES6中的Class"><a href="#ES6中的Class" class="headerlink" title="ES6中的Class"></a>ES6中的Class</h3><h4 id="1-首先我们可以回归一下ES5之前的类是如何实现的。"><a href="#1-首先我们可以回归一下ES5之前的类是如何实现的。" class="headerlink" title="1.首先我们可以回归一下ES5之前的类是如何实现的。"></a>1.首先我们可以回归一下ES5之前的类是如何实现的。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//一个类</span><br><span class="line">function Tool(name)&#123;</span><br><span class="line">    this.name=&#x27;张三&#x27;;</span><br><span class="line">    this.run = function()&#123;</span><br><span class="line">        alert(`$&#123;this.name&#125;,在奔跑`);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line">//实例化</span><br><span class="line">var tool = new Tool(&#x27;李四&#x27;);</span><br><span class="line">tool.run();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用create创建类</span><br><span class="line">var Dog = &#123;</span><br><span class="line">    name:&#x27;大黄&#x27;,</span><br><span class="line">    run()&#123;</span><br><span class="line">        console.log(&#x27;我是大黄&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">Dog.prototype.name = &#x27;王五&#x27;;</span><br><span class="line">var dog = Object.create(Dog);</span><br><span class="line"></span><br><span class="line">//使用  Object.create 创建的类 没有 静态类型 ，prototype</span><br><span class="line">dog.run();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-ES6的class"><a href="#2-ES6的class" class="headerlink" title="2.ES6的class"></a>2.ES6的class</h4><p>1.es6的class更想是一个语法糖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//es6的类</span><br><span class="line">class Prson &#123;</span><br><span class="line">    constructor(name, age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    run()&#123;</span><br><span class="line">        console.log(&#x27;你好啊&#x27;+this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var prson = new Prson(&#x27;弟弟&#x27;);</span><br><span class="line">prson.run();//你好啊 弟弟</span><br><span class="line">console.log(prson)</span><br><span class="line">console.log(Prson === Prson.prototype.constructor);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Prson的原型链的构造器指向了Prson函数。所以 es6的构造函数也有prototype</span><br></pre></td></tr></table></figure><h4 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3.constructor"></a>3.constructor</h4><p>constructor是类的默认方法，只要new实例化的时候，就会调用。即使我们写，也会添加···</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.sayName();</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    sayName()&#123;</span><br><span class="line">        console.log(this.name);//小明</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const person = new Person(&#x27;小明&#x27;,11);</span><br><span class="line">//关于 constructor 类的默认方法。new实例化后会默认调用。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-class的特性"><a href="#4-class的特性" class="headerlink" title="4.class的特性"></a>4.class的特性</h4><p>1.class的方法除非你定义在实例化的对象上，否则都是定义在prototype上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.sayName();</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    sayName()&#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const person = new Person(&#x27;小明&#x27;,11);</span><br><span class="line">//类的方法只要不是定义在实例化后的对象上，就只能定义在prototype上面。</span><br><span class="line">person.love = ()=&gt;&#123;</span><br><span class="line">   console.log(11);</span><br><span class="line">&#125;</span><br><span class="line">person.love();</span><br><span class="line">console.log(Person.prototype.love)//undefined</span><br><span class="line">//关于 constructor 类的默认方法。new实例化后会默认调用。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.类只能先声明，后实例化。没有变量提升。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// error index.js:13 Uncaught ReferenceError: Cannot access &#x27;Person&#x27; before initialization</span><br><span class="line">const person = new Person(&#x27;小明&#x27;,11);</span><br><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.sayName();</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    sayName()&#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="class的静态方法。"><a href="#class的静态方法。" class="headerlink" title="class的静态方法。"></a>class的静态方法。</h4><p>1.静态方法只能在class上面调用。实例无法使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//class的静态方法 只能在类上调用，实例无法使用。</span><br><span class="line"></span><br><span class="line">class Dog&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;;</span><br><span class="line">    static run(name)&#123;</span><br><span class="line">        console.log(name)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">var dog = new Dog(&#x27;大黄&#x27;);</span><br><span class="line">Dog.run(&#x27;李四&#x27;);</span><br><span class="line">dog.run(&#x27;胖虎&#x27;);// dog.run is not a function</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.如果静态方法包含this，那么这个this指向class，而不是实例。（class的静态方法只能调用静态方法，不能调用实例方法。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line"></span><br><span class="line">//class的静态方法 只能在类上调用，实例无法使用。</span><br><span class="line"></span><br><span class="line">class Dog&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;;</span><br><span class="line">    static run(name)&#123;</span><br><span class="line">        this.pay();</span><br><span class="line">    &#125;;</span><br><span class="line">    pay()&#123;</span><br><span class="line">        console.log(&#x27;狗狗去付账&#x27;);</span><br><span class="line">    &#125;;</span><br><span class="line">    static pay()&#123;</span><br><span class="line">        console.log(&#x27;狗狗去福州&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Dog.pay();//index.js:16 狗狗去福州</span><br><span class="line">var dog = new Dog(&#x27;大黄&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从这里我们能得出 class的静态方法与实例方法可以重名。</p><h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><p>1.class里面加入 static 的属性就是静态属性，实例无法使用。只能给class使用。<br>2.和静态方法一样，静态属性与实例属性可以重名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//class的静态属性。</span><br><span class="line"></span><br><span class="line">class Dog &#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;;</span><br><span class="line">    static name = 11;</span><br><span class="line">&#125;;</span><br><span class="line">var dog = new Dog(&#x27;大黄&#x27;);</span><br><span class="line">console.log(Dog.name,dog.name)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关于class的extends，实现继承。"><a href="#关于class的extends，实现继承。" class="headerlink" title="关于class的extends，实现继承。"></a>关于class的extends，实现继承。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// class继承</span><br><span class="line"></span><br><span class="line">class Animal&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    run(name)&#123;</span><br><span class="line">        alert(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">//cat 继承了 Animalclass</span><br><span class="line">class Cat extends Animal&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">var cat = new Cat();</span><br><span class="line">cat.run(&#x27;李四&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="class-super关键字"><a href="#class-super关键字" class="headerlink" title="class super关键字"></a>class super关键字</h4><p>1.super可以作为函数，也可以作为对象。<br>2.子类继承父类之前，没有super函数，是不能使用this的。<br>3.super在子类的构造函数里面代表了父类的构造器。<br>4.super作为对象，调用父类的实例方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// class继承</span><br><span class="line"></span><br><span class="line">class Animal&#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">     run()&#123;</span><br><span class="line">        console.log(&#x27;111&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">//cat 继承了 Animalclass</span><br><span class="line">class Cat extends Animal&#123;</span><br><span class="line">    constructor(name,age,color)&#123;</span><br><span class="line">        //super代表父类的构造函数。</span><br><span class="line">        super(name,age,color);</span><br><span class="line">        console.log(this.name,this.age)</span><br><span class="line">    &#125;</span><br><span class="line">    toString() &#123;</span><br><span class="line">        //super指向父类的实例方法。</span><br><span class="line">        super.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var cat = new Cat(&#x27;李四&#x27;,11,&#x27;red&#x27;);</span><br><span class="line">cat.toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.class是一个语法糖，本身还是基于prototype来做的继承。<br>2.静态类型static，只能在这个class访问。实例化的对象无法访问。<br>3.静态方法也只能给这个类去用。实例化后的对象无法使用。<br>4.子类继承父类，super必须要在构造器中作为函数使用。<br>5.super既可以当作函数也可以当作对象。作为函数，在子类构造器中代表了父类构造函数<br>作为对象代表了父类实例方法，在静态类型的方法中，指向父类。</p>]]></content>
    
    
    <summary type="html">关于ES6，class的使用，如果使用class声明一个类，类的静态属性，静态方法。super的使用</summary>
    
    
    
    <category term="JavaScript" scheme="http://yaru722.gitee.io/categories/JavaScript/"/>
    
    
    <category term="ES6" scheme="http://yaru722.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的async与await</title>
    <link href="http://yaru722.gitee.io/2021/06/05/JavaScript%E4%B8%AD%E7%9A%84async/"/>
    <id>http://yaru722.gitee.io/2021/06/05/JavaScript%E4%B8%AD%E7%9A%84async/</id>
    <published>2021-06-05T07:16:40.000Z</published>
    <updated>2021-06-11T10:56:42.742Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在JavaScript中，async与await的使用"><a href="#在JavaScript中，async与await的使用" class="headerlink" title="在JavaScript中，async与await的使用"></a>在JavaScript中，async与await的使用</h4><h5 id="1-async函数中的，async代表一个关键字。和await是一块用的。await只能在async函数里面使用。"><a href="#1-async函数中的，async代表一个关键字。和await是一块用的。await只能在async函数里面使用。" class="headerlink" title="1.async函数中的，async代表一个关键字。和await是一块用的。await只能在async函数里面使用。"></a>1.async函数中的，async代表一个关键字。和await是一块用的。await只能在async函数里面使用。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">定义一个异步函数。</span><br><span class="line">function one()&#123;  </span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        console.log(&#x27;11&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">定义一个async函数</span><br><span class="line">async function test()&#123;</span><br><span class="line">    await one();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(test());--Promise &#123;&lt;pending&gt;&#125;</span><br><span class="line">打印出来的async函数是一个promise对象</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">既然async函数内置了 promise对象，那么就可以使用then来调用。</span><br><span class="line">test().then(res=&gt;&#123;</span><br><span class="line">    console.log(&#x27;success&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-async函数是一个异步函数。我们亲眼看到async里面内置了promise对象，但是我想从执行顺序，时间上告诉你。它真的是异步。"><a href="#2-async函数是一个异步函数。我们亲眼看到async里面内置了promise对象，但是我想从执行顺序，时间上告诉你。它真的是异步。" class="headerlink" title="2.async函数是一个异步函数。我们亲眼看到async里面内置了promise对象，但是我想从执行顺序，时间上告诉你。它真的是异步。"></a>2.async函数是一个异步函数。我们亲眼看到async里面内置了promise对象，但是我想从执行顺序，时间上告诉你。它真的是异步。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function timer() &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">//定义一个异步函数。</span><br><span class="line">async function demo() &#123;</span><br><span class="line">    console.log(11);</span><br><span class="line">    await timer().then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;2000之后执行&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">demo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-那么为什么使用async而不是-直接去用promise呢？"><a href="#3-那么为什么使用async而不是-直接去用promise呢？" class="headerlink" title="3.那么为什么使用async而不是 直接去用promise呢？"></a>3.那么为什么使用async而不是 直接去用promise呢？</h5><p>原因很简单，因为，我们假设一个情况，promise A方法成功之后去调，Promise B方法，以此类推。是的promise其实已经很好了，但是。then多了 恐怕你不会觉得它优雅。<br>其次，我有八个异步方法，我需要等他们执行完毕后，一起告诉我结果。到底是成功和失败。async函数 更好一些。</p><p>请看例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//定义一个异步函数。</span><br><span class="line">async function demo() &#123;</span><br><span class="line">    await timer(1000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步A&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    await timer(2000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步B&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    await timer(5000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步C&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    return Promise.resolve();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//控制台打印结果</span><br><span class="line">/*</span><br><span class="line">异步A</span><br><span class="line">index.js:157 异步B</span><br><span class="line">index.js:160 异步C</span><br><span class="line">index.js:166 异步执行完毕</span><br><span class="line">*/</span><br><span class="line">demo().then(res=&gt;&#123;</span><br><span class="line">    console.log(&#x27;异步执行完毕&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于async函数的理解，就像一辆校车。必须要等所有的同学都上车了才能发车。await函数全部执行完毕了，才能拿到成功还是失败。</p><h5 id="async函数执行，我们必须要把promise的结果给-return出去，如果我们不return的话，与promise不同，async函数的promise对象的状态始终就是reslove。"><a href="#async函数执行，我们必须要把promise的结果给-return出去，如果我们不return的话，与promise不同，async函数的promise对象的状态始终就是reslove。" class="headerlink" title="async函数执行，我们必须要把promise的结果给 return出去，如果我们不return的话，与promise不同，async函数的promise对象的状态始终就是reslove。"></a>async函数执行，我们必须要把promise的结果给 return出去，如果我们不return的话，与promise不同，async函数的promise对象的状态始终就是reslove。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//定义一个异步函数。</span><br><span class="line">async function demo() &#123;</span><br><span class="line">    await timer(1000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步A&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    await timer(2000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步B&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    await timer(5000).then(res=&gt;&#123;</span><br><span class="line">        console.log(&#x27;异步C&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    return Promise.resolve();//所以我们在这里把 promise的状态 return出去。</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//控制台打印结果</span><br><span class="line">/*</span><br><span class="line">异步A</span><br><span class="line">index.js:157 异步B</span><br><span class="line">index.js:160 异步C</span><br><span class="line">index.js:166 异步执行完毕</span><br><span class="line">*/</span><br><span class="line">demo().then(res=&gt;&#123;</span><br><span class="line">    console.log(&#x27;异步执行完毕&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="谈谈await的理解。"><a href="#谈谈await的理解。" class="headerlink" title="谈谈await的理解。"></a>谈谈await的理解。</h5><p>1.await必须要在async函数里面使用。否则报错。<br>2.await函数表示一个等待，它返回的不是promise对象，而是promise的结果。<br>3，await函数，会阻止async函数的执行。JavaScript是一个从上往下执行的语言。但是，await可以跳出async函数，继续往后面执行。</p><h5 id="关于await的执行顺序。"><a href="#关于await的执行顺序。" class="headerlink" title="关于await的执行顺序。"></a>关于await的执行顺序。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function timer(timer) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            return resolve(timer + 1000);</span><br><span class="line">        &#125;, timer);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">function one(num) &#123;</span><br><span class="line">    console.log(&#x27;第一次不延迟&#x27; + num);</span><br><span class="line">    return timer(num);</span><br><span class="line">&#125;;</span><br><span class="line">function two(num) &#123;</span><br><span class="line">    console.log(&#x27;第二次延迟&#x27; + num);</span><br><span class="line">    return timer(num);</span><br><span class="line">&#125;;</span><br><span class="line">function three(num) &#123;</span><br><span class="line">    console.log(&#x27;第三次延迟+&#x27; + num);</span><br><span class="line">    return timer(num);</span><br><span class="line">&#125;;</span><br><span class="line">async function test() &#123;</span><br><span class="line">    let time = 1000;</span><br><span class="line">    const timer1 = await one(time);</span><br><span class="line">    const timer2 = await two(timer1);</span><br><span class="line">    const timer3 = await three(timer2);</span><br><span class="line">    console.log(&#x27;第四次延迟&#x27;,timer3);</span><br><span class="line">    return Promise.resolve();</span><br><span class="line">&#125;;</span><br><span class="line">test().then(res=&gt;&#123;</span><br><span class="line">    console.log(&#x27;end&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">timer(1000).then(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;11&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">控制台打印</span><br><span class="line">1.第一次不延迟1000，因为test函数的变量值，传了进去，执行了one方法。  </span><br><span class="line">因为跳出async函数后，执行了timer也是异步方法。</span><br><span class="line">2.第二次延迟2000，所以继续执行two，还是遇到了await，跳出去。</span><br><span class="line">3.11，跳出来执行，timer异步任务结束。</span><br><span class="line">4.第三次延迟，3000，拿到了two函数的返回值。await跳出async函数，可惜async函数外部没有可执行的函数了。</span><br><span class="line">5.第四次，延迟，three函数的返回值出来了。</span><br><span class="line">6.11，await函数执行完毕，promise给结果。</span><br></pre></td></tr></table></figure><h5 id="async函数异常不好捕捉。try-catch-配合使用。"><a href="#async函数异常不好捕捉。try-catch-配合使用。" class="headerlink" title="async函数异常不好捕捉。try catch 配合使用。"></a>async函数异常不好捕捉。try catch 配合使用。</h5><p>反面案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//async函数异常不好捕捉，一个异常，后续方法都不会执行了。</span><br><span class="line">function run(value)&#123;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        if(value)&#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            reject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">async function test()&#123;</span><br><span class="line">    await run(true);</span><br><span class="line">    await run(false);</span><br><span class="line">&#125;;</span><br><span class="line">test().then(res=&gt;&#123;</span><br><span class="line">    console.log(&#x27;成功了&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//控制台Uncaught (in promise) undefined</span><br></pre></td></tr></table></figure><p>正确方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">使用try catch配合。</span><br><span class="line">function run(value) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        if (value) &#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            reject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">async function test() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        await run(false);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(&#x27;run(false)报错&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        await run(true);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(&#x27;run(true)报错&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">test().then(res =&gt; &#123;</span><br><span class="line">    console.log(&#x27;成功了&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//控制台run(false)报错，成功了</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>1.async是语法糖，也是一个关键字。<br>2.async函数，内置promise。<br>3.async函数默认，resolve。必须return才能改变。<br>4.async函数，必须等所有的await函数都有结果了，promise才会有结果。<br>5.async函数，只要有一个await异步任务异常就会停止。<br>6.async函数建议配合try，catch。抛出异常，继续执行下个异步任务。</p><p>1.await代表一个异步任务。<br>2.await必须要在async里面用。<br>3.await函数，里面同步的方法还是会执行的。遇到promise，跳出async，等待。<br>4.await返回的不是promise对象，只是promise的结果。</p>]]></content>
    
    
    <summary type="html">关于ES6,async与await的使用方法</summary>
    
    
    
    <category term="JavaScript" scheme="http://yaru722.gitee.io/categories/JavaScript/"/>
    
    
    <category term="ES6" scheme="http://yaru722.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>我的想法</title>
    <link href="http://yaru722.gitee.io/2021/06/05/hello-world/"/>
    <id>http://yaru722.gitee.io/2021/06/05/hello-world/</id>
    <published>2021-06-05T07:08:29.916Z</published>
    <updated>2021-06-11T10:55:51.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><h2 id="1-自我介绍"><a href="#1-自我介绍" class="headerlink" title="1 自我介绍"></a>1 自我介绍</h2><p>1.我是一个比较热爱技术，沉默寡言的我。学历不高，受教育程度有限，使我在选择这门活计的时候犹豫了很久，最后抱着试试看的心态做的。<br>2.怕什么真理无穷，进一寸有一寸的欢喜</p>]]></content>
    
    
    <summary type="html">碎碎念</summary>
    
    
    
    <category term="开发日记" scheme="http://yaru722.gitee.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="自我表达" scheme="http://yaru722.gitee.io/tags/%E8%87%AA%E6%88%91%E8%A1%A8%E8%BE%BE/"/>
    
  </entry>
  
</feed>
